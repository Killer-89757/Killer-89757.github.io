<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>文件上传</title>
      <link href="/2024/03/22/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2024/03/22/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Flask教程-七-文件上传"><a href="#Flask教程-七-文件上传" class="headerlink" title="Flask教程(七)文件上传"></a><a href="https://xugaoxiang.com/2020/03/20/flask-7-file-upload/">Flask教程(七)文件上传</a></h1><h3 id="软硬件环境"><a href="#软硬件环境" class="headerlink" title="软硬件环境"></a>软硬件环境</h3><ul><li>Windows 10 64bit</li><li>Anaconda3 with <a href="https://xugaoxiang.com/tag/python/">python</a> 3.7</li><li>PyCharm 2019.3</li><li>Flask 1.1.1</li></ul><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>文件上传是个经常碰到的问题。其中涉及很多的内容比如文件的上传、文件类型的过滤，文件大小的限制，文件重命名，文件目录管理等等。下面我们来看看最基本的上传功能的实现，至于提到的其它问题，大家可以自己摸索摸索。</p><h3 id="Flask处理文件上传"><a href="#Flask处理文件上传" class="headerlink" title="Flask处理文件上传"></a>Flask处理文件上传</h3><p>在<code>Flask</code>中进行文件上传，需要在通过<code>html</code>中的<code>form</code>表单，而且需要设置<code>enctype=multipart/form-data</code>，看下面的实例</p><p><code>index.html</code>文件内容</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>upload<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span> = <span class="string">&quot;/success&quot;</span> <span class="attr">method</span> = <span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Upload&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要就是一个<code>form</code>表单，使用的<code>http</code>方法是<code>POST</code>并且设置<code>enctype=&quot;multipart/form-data&quot;</code>，<code>input</code>标签的类型是<code>file</code>，接下来还需要编写一个<code>html</code>，用来显示上传成功后的信息</p><p><code>success.html</code>文件内容</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>File uploaded successfully!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>File Name: <span class="tag">&lt;<span class="name">b</span>&gt;</span> &#123;&#123;name&#125;&#125; <span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后来看看<code>Flask</code>端的处理代码，<code>run.py</code>文件内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/success&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">success</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        f = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        f.save(f.filename)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;success.html&#x27;</span>, name=f.filename)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;127.0.0.1&quot;</span>,port=<span class="number">5000</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>注意到<code>success</code>方法中，只处理<code>POST</code>请求，并从请求对象中的<code>files</code>获取到文件的内容，调用<code>save</code>保存文件，渲染网页时，将文件名传递过去，文件名会在<code>success.html</code>中显示</p><p>启动<code>Flask</code>服务，访问<a href="http://127.0.0.1:5000/">http://127.0.0.1:5000</a></p><p><img src="https://image.xugaoxiang.com/imgs/2020/12/92777c31881f0a5f.png" alt="flask"></p><p>点击<code>选择文件</code>，在弹出框中选择需要上传的文件，然后点击<code>Upload</code></p><p><img src="https://image.xugaoxiang.com/imgs/2020/12/3b3cc78a98b70938.png" alt="flask"></p><p>来到<code>pycharm</code>可以看到刚刚接收到的文件<code>python_logo.png</code></p><p><img src="https://image.xugaoxiang.com/imgs/2020/12/a3ee8dded624982b.png" alt="flask"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>添加favicon</title>
      <link href="/2024/03/22/%E6%B7%BB%E5%8A%A0favicon/"/>
      <url>/2024/03/22/%E6%B7%BB%E5%8A%A0favicon/</url>
      
        <content type="html"><![CDATA[<h1 id="Flask教程-二十一-添加favicon"><a href="#Flask教程-二十一-添加favicon" class="headerlink" title="Flask教程(二十一)添加favicon"></a>Flask教程(二十一)添加favicon</h1><h3 id="软硬件环境"><a href="#软硬件环境" class="headerlink" title="软硬件环境"></a>软硬件环境</h3><ul><li>windows 10 64bit</li><li>anaconda3 with <a href="https://xugaoxiang.com/tag/python/">python</a> 3.7</li><li><a href="https://xugaoxiang.com/tag/flask/">flask</a> 1.1.2</li></ul><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>favicon</code>是<code>favorites icon</code>的缩写，是指在网页浏览器显示在标签页或者历史记录里的图标。这个图标能帮助用户将您的网站与其他网站区分开。</p><p><img src="https://image.xugaoxiang.com/imgs/2020/11/7935912149734132.png" alt="favicon"></p><h3 id="图片转icon"><a href="#图片转icon" class="headerlink" title="图片转icon"></a>图片转icon</h3><p><code>favicon</code>文件的尺寸通常比较小，常见的尺寸有16x16，32x32和48x48。我们准备一张<code>jpg</code>或者<code>png</code>的图片，来到在线的转换站点进行转换</p><p><a href="https://favicon.io/favicon-converter/">https://favicon.io/favicon-converter/</a></p><p><img src="https://image.xugaoxiang.com/imgs/2020/11/97f22b79c104aa15.png" alt="favicon"></p><h3 id="flask中如何处理？"><a href="#flask中如何处理？" class="headerlink" title="flask中如何处理？"></a>flask中如何处理？</h3><p>我们简单写个<code>flask</code>应用，这个应该非常熟练了，<code>app.py</code>内容为</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>创建模板文件<code>index.html</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;favicon.ico&#x27;) &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Favicon<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello favicon<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后将转换好的<code>icon</code>文件放到<code>static</code>文件夹下，文件名为<code>favicon.ico</code></p><p>最后启动<code>flask</code>服务后，访问<code>http://127.0.0.1:5000</code>，在浏览器地址栏左侧就可以看到<code>favicon</code>了</p><p><img src="https://image.xugaoxiang.com/imgs/2020/11/e5bc8003b837731d.png" alt="favicon"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库操作flask_sqlalchemy</title>
      <link href="/2024/03/22/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9Cflask_sqlalchemy/"/>
      <url>/2024/03/22/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9Cflask_sqlalchemy/</url>
      
        <content type="html"><![CDATA[<h1 id="Flask教程-十一-数据库操作flask-sqlalchemy"><a href="#Flask教程-十一-数据库操作flask-sqlalchemy" class="headerlink" title="Flask教程(十一)数据库操作flask_sqlalchemy"></a><a href="https://xugaoxiang.com/2020/07/14/flask-11-sqlalchemy/">Flask教程(十一)数据库操作flask_sqlalchemy</a></h1><h3 id="软硬件环境"><a href="#软硬件环境" class="headerlink" title="软硬件环境"></a>软硬件环境</h3><ul><li>windows 10 64bit</li><li>anaconda3 with <a href="https://xugaoxiang.com/tag/python/">python</a> 3.7</li><li>pycharm 2020.1.2</li><li><a href="https://xugaoxiang.com/tag/flask/">flask</a> 1.1.2</li><li><a href="https://xugaoxiang.com/tag/sqlite/">sqlite</a>3</li></ul><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在<code>web</code>开发中，离不开数据库操作。前文我们已经介绍过<code>SQLAlchemy</code>这个<code>ORM</code>, <a href="https://xugaoxiang.com/2020/06/16/python-sqlalchemy-mysql/">python使用sqlalchemy操作mysql数据库</a>, 真的非常简单好用。<code>Flask-SQLAlchemy</code>是<code>flask</code>的扩展，它将<code>SQLAlchemy</code>的支持带到了<code>flask</code>应用程序中</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用老方法安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install flask_sqlalchemy</span><br></pre></td></tr></table></figure><h3 id="sqlite安装"><a href="#sqlite安装" class="headerlink" title="sqlite安装"></a><a href="https://xugaoxiang.com/tag/sqlite/">sqlite</a>安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SQLAlchemy`操作`mysql`的示例前面已经演示过了，这次我们使用`sqlite`数据库。`sqlite`是一款轻量级的数据库，可以很方便的在嵌入式设备或者移动设备上使用，支持主流的操作系统`win`、`linux`、`macOS`、`android`等，目前版本已经发展到了`sqlite3</span><br></pre></td></tr></table></figure><p>来到官方站点 <a href="https://www.sqlite.org/download.html%EF%BC%8C%E6%A0%B9%E6%8D%AE%E8%87%AA%E5%B7%B1%E7%9A%84%E5%B9%B3%E5%8F%B0%E8%BF%9B%E8%A1%8C%E9%80%89%E6%8B%A9%E4%B8%8B%E8%BD%BD">https://www.sqlite.org/download.html，根据自己的平台进行选择下载</a></p><p><img src="https://image.xugaoxiang.com/imgs/2020/07/e5b026f717a1e8ef.png" alt="flask-sqlalchemy"></p><p>将下载下来的2个压缩包分别加压缩，然后将里面的文全部件放在一个文件夹里，方便使用，然后将这个文件夹的路径加入到系统的环境变量里</p><p><img src="https://image.xugaoxiang.com/imgs/2020/07/54e85b8e3986a781.png" alt="flask-sqlalchemy"></p><p><img src="https://image.xugaoxiang.com/imgs/2020/07/8e428dab159ca513.png" alt="flask-sqlalchemy"></p><p>然后，我们在任意位置，打开终端，就都可以直接使用<code>sqlite.exe</code>了</p><p><img src="https://image.xugaoxiang.com/imgs/2020/07/64cc08d83b0a63be.png" alt="flask-sqlalchemy"></p><p>如果不熟悉<code>sql</code>的命令的话，可以使用图形化客户端，这里推荐一个工具，它是一个开源的项目，可以下面的地址进行下载</p><p><a href="https://sqlitebrowser.org/dl/">https://sqlitebrowser.org/dl/</a></p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>这里还是使用上一节 <a href="https://xugaoxiang.com/2020/07/09/flask-10-wtf/">Flask教程(十)表单处理Flask-WTF</a> 中的用户注册是示例，在原来的基础上进行修改，当用户提交注册信息的时候，<code>flask</code>会去数据库中进行查询，如果用户名不存在则将用户信息写入<code>sqlite</code>，否则给出无效用户名的错误信息，要求用户重新填写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request</span><br><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> SubmitField, StringField, PasswordField</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> DataRequired, EqualTo, Length, Email</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&quot;xxx&quot;</span></span><br><span class="line"><span class="comment"># 设置数据库URI</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;sqlite:///member.sqlite3&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用app作为参数实例化一个SQLAlchemy类的对象</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建会员模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Member</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(<span class="string">&#x27;id&#x27;</span>, db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">45</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    email = db.Column(db.String(<span class="number">45</span>))</span><br><span class="line">    password = db.Column(db.String(<span class="number">128</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, username, email, password</span>):</span><br><span class="line">        self.username = username</span><br><span class="line">        self.email = email</span><br><span class="line">        self.password = password</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据表</span></span><br><span class="line">db.create_all()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用WTF实现表单，自定义一个表单类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegisterForm</span>(<span class="title class_ inherited__">FlaskForm</span>):</span><br><span class="line">    username = StringField(label=<span class="string">&#x27;用户名: &#x27;</span>, validators=[DataRequired()])</span><br><span class="line">    email = StringField(label=<span class="string">&#x27;邮箱: &#x27;</span>, validators=[DataRequired(), Email(message=<span class="string">&#x27;邮箱格式错误&#x27;</span>)])</span><br><span class="line">    password = PasswordField(label=<span class="string">&#x27;密码: &#x27;</span>, validators=[DataRequired(), Length(<span class="number">6</span>, <span class="number">16</span>, message=<span class="string">&#x27;密码格式错误&#x27;</span>)])</span><br><span class="line">    password2 = PasswordField(label=<span class="string">&#x27;确认密码: &#x27;</span>, validators=[DataRequired(), Length(<span class="number">6</span>, <span class="number">16</span>, message=<span class="string">&#x27;密码格式错误&#x27;</span>), EqualTo(<span class="string">&#x27;password&#x27;</span>, message=<span class="string">&#x27;密码不一致&#x27;</span>)])</span><br><span class="line">    submit = SubmitField(label=<span class="string">&#x27;注册&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GEt&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    register_form = RegisterForm()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> register_form.validate_on_submit():</span><br><span class="line">            username = request.form.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">            email = request.form.get(<span class="string">&#x27;email&#x27;</span>)</span><br><span class="line">            password = request.form.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 判断数据库中是否已经存在相同的用户名</span></span><br><span class="line">            <span class="keyword">if</span> Member.query.filter_by(username=username).<span class="built_in">all</span>():</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;Invalid username&#x27;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 构建数据库记录并写入数据库</span></span><br><span class="line">            member = Member(username=username, email=email, password=password)</span><br><span class="line">            db.session.add(member)</span><br><span class="line">            db.session.commit()</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Register success.&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Invalid&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 把实例化后的register_form传入到页面register.html中</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>, form=register_form)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;127.0.0.1&quot;</span>,port=<span class="number">5000</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>模板文件跟原来的一样，只有一个<code>form</code>表单，没有做任何修改</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.csrf_token() &#125;&#125;</span><br><span class="line">        &#123;&#123; form.username.label &#125;&#125; &#123;&#123; form.username &#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.email.label &#125;&#125; &#123;&#123; form.email  &#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.password.label &#125;&#125; &#123;&#123; form.password &#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.password2.label &#125;&#125; &#123;&#123; form.password2 &#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.submit &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>程序运行起来后，访问<code>http://127.0.0.1:5000</code>，输入满足条件的注册信息</p><p><img src="https://image.xugaoxiang.com/imgs/2020/07/6b089ae9698bb29e.png" alt="flask-sqlalchemy"></p><p><img src="https://image.xugaoxiang.com/imgs/2020/07/4c0b742f4266f95f.png" alt="flask-sqlalchemy"></p><p>在项目根目录生成了数据库文件<code>member.sqlite3</code></p><p><img src="https://image.xugaoxiang.com/imgs/2020/07/ae57b1fb7feb11dd.png" alt="flask-sqlalchemy"></p><p>使用图形化工具<code>DB Browser</code>打开<code>member.sqlite3</code>可以看到刚才注册成功的用户信息，利用工具，可以很方便的进行数据的增删改查</p><p><img src="https://image.xugaoxiang.com/imgs/2020/07/c459a67b7b6cb9f3.png" alt="flask-sqlalchemy"></p><p>如果用户名已经被注册过了，则页面提示错误信息，相应的信息也不会被写入数据库</p><p><img src="https://image.xugaoxiang.com/imgs/2020/07/298f3cc169e78604.png" alt="flask-sqlalchemy"></p><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>如果出现警告</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UserWarning SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead</span><br></pre></td></tr></table></figure><p>可以通过设置<code>app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = True</code>来消除上面的警告</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>闪现信息</title>
      <link href="/2024/03/22/%E9%97%AA%E7%8E%B0%E6%B6%88%E6%81%AF/"/>
      <url>/2024/03/22/%E9%97%AA%E7%8E%B0%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="Flask教程-九-闪现消息"><a href="#Flask教程-九-闪现消息" class="headerlink" title="Flask教程(九)闪现消息"></a><a href="https://xugaoxiang.com/2020/03/25/flask-9-flash/">Flask教程(九)闪现消息</a></h1><h3 id="软硬件环境"><a href="#软硬件环境" class="headerlink" title="软硬件环境"></a>软硬件环境</h3><ul><li>Windows 10 64bit</li><li>Anaconda3 with <a href="https://xugaoxiang.com/tag/python/">python</a> 3.7</li><li>PyCharm 2019.3</li><li>Flask 1.1.1</li></ul><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在<code>web</code>应用中，经常需要对用户的操作实施反馈，好让用户知道到底发生了什么事。最常见的方式自然是在网页上显示一些字符，可以是确认消息、警告或者错误提醒。</p><h3 id="Flask实现"><a href="#Flask实现" class="headerlink" title="Flask实现"></a>Flask实现</h3><p>在<code>Flask</code>中，使用<code>flash message</code>(闪现消息)，具体使用的方法是<code>flash()</code></p><blockquote><p>flash(message, category)</p></blockquote><p>其中<br>* message: 具体的消息内容<br>* category: 可选参数，表示消息类型，比如错误、警告等</p><p>在视图函数中发送了消息，自然的，就需要在模板文件中取出消息，我们使用方法<code>get_flashed_message</code></p><blockquote><p>get_flashed_messages(with_categories, category_filter)</p></blockquote><p>其中2个参数都是可选参数</p><ul><li>with_categories: 消息类型，与上面的<code>flash</code>匹配</li><li>category_filter: 过滤条件</li></ul><p>下面看个完整的实例</p><p><code>run.py</code>文件内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect, url_for, flash</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&quot;xxx&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    error = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        <span class="keyword">if</span> request.form[<span class="string">&#x27;email&#x27;</span>] != <span class="string">&#x27;test@gmail.com&#x27;</span> <span class="keyword">or</span> request.form[<span class="string">&#x27;password&#x27;</span>] != <span class="string">&#x27;test&#x27;</span>:</span><br><span class="line">            error = <span class="string">&quot;Invalid account.&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flash(<span class="string">&quot;Login successfully&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, error=error)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;127.0.0.1&quot;</span>,port=<span class="number">5000</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>当邮箱和密码输入正确的时候，调用<code>flash</code>方法</p><p>模板文件<code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% with messages = get_flashed_messages() %&#125;</span><br><span class="line">         &#123;% if messages %&#125;</span><br><span class="line">               &#123;% for message in messages %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">               &#123;% endfor %&#125;</span><br><span class="line">         &#123;% endif %&#125;</span><br><span class="line">    &#123;% endwith %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Welcome!<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;&#123;&#123; url_for(&#x27;login&#x27;) &#125;&#125;&quot;</span>&gt;</span>login<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过调用<code>get_flashed_messages</code>方法获取到所有的消息，然后使用<code>for-in</code>的循环显示出每一条消息。页面的底部，我们放置一个超链接，用于跳转到<code>login</code>页面</p><p><code>login.html</code>文件内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span> = <span class="string">&quot;post&quot;</span> <span class="attr">action</span> = <span class="string">&quot;http://localhost:5000/login&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&#x27;email&#x27;</span> <span class="attr">name</span> = <span class="string">&#x27;email&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&#x27;password&#x27;</span> <span class="attr">name</span> = <span class="string">&#x27;password&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;submit&quot;</span> <span class="attr">value</span> = <span class="string">&quot;Submit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;% if error %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Error<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>: &#123;&#123; error &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是前面我们介绍过的简单登录界面，最下面用于显示出错信息</p><p>最后启动下<code>Flask</code>服务，访问<a href="http://127.0.0.1:5000/">http://127.0.0.1:5000</a></p><p><img src="https://image.xugaoxiang.com/imgs/2020/12/5b650bda89543ca0.png" alt="flask"></p><p>输入<code>email</code>和<code>password</code></p><p><img src="https://image.xugaoxiang.com/imgs/2020/12/a0370dc596ceaf0c.png" alt="flask"></p><p>出错，显示无效账户信息</p><p><img src="https://image.xugaoxiang.com/imgs/2020/12/fcbab509c41c0390.png" alt="flask"></p><p>成功，显示欢迎信息</p><p><img src="https://image.xugaoxiang.com/imgs/2020/12/8e693af00c6122d7.png" alt="flask"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>日志</title>
      <link href="/2024/03/22/%E6%97%A5%E5%BF%97/"/>
      <url>/2024/03/22/%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h1 id="Flask教程-十五-日志"><a href="#Flask教程-十五-日志" class="headerlink" title="Flask教程(十五)日志"></a><a href="https://xugaoxiang.com/2020/08/25/flask-15-logging/">Flask教程(十五)日志</a></h1><h3 id="软硬件环境"><a href="#软硬件环境" class="headerlink" title="软硬件环境"></a>软硬件环境</h3><ul><li>windows 10 64bit</li><li>anaconda3 with <a href="https://xugaoxiang.com/tag/python/">python</a> 3.7</li><li>pycharm 2020.1.2</li><li><a href="https://xugaoxiang.com/tag/flask/">flask</a> 1.1.2</li></ul><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>flask</code>日志使用标准的<code>python logging</code>。所有与<code>flask</code>相关的消息都用<code>app.logger</code>来记录，同样的，这个日志记录器也可用于你自己的日志记录。</p><p><code>logging</code>是<code>python</code>自带的系统模块，在 <a href="https://xugaoxiang.com/category/python%E7%BC%96%E7%A8%8B/python%E5%AE%9E%E7%94%A8%E6%A8%A1%E5%9D%97/"><code>python</code>实用模块</a> 板块，我们已经介绍过它的使用方法，不了解的童鞋可以去看看，链接是 <a href="https://xugaoxiang.com/2019/12/04/python-module-logging/">https://xugaoxiang.com/2019/12/04/python-module-logging/</a></p><h3 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h3><p>在<code>flask</code>中，不用任何配置就可以使用<code>app.logger</code>，如下示例</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    user = get_user(request.form[<span class="string">&#x27;username&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> user.check_password(request.form[<span class="string">&#x27;password&#x27;</span>]):</span><br><span class="line">        login_user(user)</span><br><span class="line">        app.logger.info(<span class="string">f&#x27;<span class="subst">&#123;user.username&#125;</span> logged in successfully.&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        app.logger.info(<span class="string">f&#x27;<span class="subst">&#123;user.username&#125;</span> failed to log in&#x27;</span>)</span><br><span class="line">        abort(<span class="number">401</span>)</span><br></pre></td></tr></table></figure><p>默认情况下，<code>flask</code>会自动添加一个<code>StreamHandler</code>到<code>app.logger</code>。在请求过程中，它会写到由<code>WSGI</code>服务器指定的，保存在<code>environ[&#39;wsgi.errors&#39;]</code>变量中的日志流(通常是<code>sys.stderr</code>)中。在请求之外，则会记录到<code>sys.stderr</code>。</p><p>如果你对日志默认配置不太满意的话，可以自行设置。当想要为项目配置日志时，应当在创建应用对象之前进行配置。 如果晚了，那么<code>app.logger</code>就会成为缺省记录器。下面我们使用<code>logging.config.dictConfig</code>来配置日志，看示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging.config</span><br><span class="line"></span><br><span class="line">logging.config.dictConfig(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;version&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;disable_existing_loggers&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">        <span class="string">&quot;formatters&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;simple&quot;</span>: &#123;<span class="string">&quot;format&quot;</span>: <span class="string">&quot;%(asctime)s - %(name)s - %(levelname)s - %(message)s&quot;</span>&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;handlers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;console&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;class&quot;</span>: <span class="string">&quot;logging.StreamHandler&quot;</span>,</span><br><span class="line">                <span class="string">&quot;level&quot;</span>: <span class="string">&quot;DEBUG&quot;</span>,</span><br><span class="line">                <span class="string">&quot;formatter&quot;</span>: <span class="string">&quot;simple&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stream&quot;</span>: <span class="string">&quot;ext://sys.stdout&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;info_file_handler&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;class&quot;</span>: <span class="string">&quot;logging.handlers.RotatingFileHandler&quot;</span>,</span><br><span class="line">                <span class="string">&quot;level&quot;</span>: <span class="string">&quot;INFO&quot;</span>,</span><br><span class="line">                <span class="string">&quot;formatter&quot;</span>: <span class="string">&quot;simple&quot;</span>,</span><br><span class="line">                <span class="string">&quot;filename&quot;</span>: <span class="string">&quot;info.log&quot;</span>,</span><br><span class="line">                <span class="string">&quot;maxBytes&quot;</span>: <span class="number">10485760</span>,</span><br><span class="line">                <span class="string">&quot;backupCount&quot;</span>: <span class="number">50</span>,</span><br><span class="line">                <span class="string">&quot;encoding&quot;</span>: <span class="string">&quot;utf8&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;error_file_handler&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;class&quot;</span>: <span class="string">&quot;logging.handlers.RotatingFileHandler&quot;</span>,</span><br><span class="line">                <span class="string">&quot;level&quot;</span>: <span class="string">&quot;ERROR&quot;</span>,</span><br><span class="line">                <span class="string">&quot;formatter&quot;</span>: <span class="string">&quot;simple&quot;</span>,</span><br><span class="line">                <span class="string">&quot;filename&quot;</span>: <span class="string">&quot;errors.log&quot;</span>,</span><br><span class="line">                <span class="string">&quot;maxBytes&quot;</span>: <span class="number">10485760</span>,</span><br><span class="line">                <span class="string">&quot;backupCount&quot;</span>: <span class="number">20</span>,</span><br><span class="line">                <span class="string">&quot;encoding&quot;</span>: <span class="string">&quot;utf8&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;debug_file_handler&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;class&quot;</span>: <span class="string">&quot;logging.handlers.RotatingFileHandler&quot;</span>,</span><br><span class="line">                <span class="string">&quot;level&quot;</span>: <span class="string">&quot;DEBUG&quot;</span>,</span><br><span class="line">                <span class="string">&quot;formatter&quot;</span>: <span class="string">&quot;simple&quot;</span>,</span><br><span class="line">                <span class="string">&quot;filename&quot;</span>: <span class="string">&quot;debug.log&quot;</span>,</span><br><span class="line">                <span class="string">&quot;maxBytes&quot;</span>: <span class="number">10485760</span>,</span><br><span class="line">                <span class="string">&quot;backupCount&quot;</span>: <span class="number">50</span>,</span><br><span class="line">                <span class="string">&quot;encoding&quot;</span>: <span class="string">&quot;utf8&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;loggers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;my_module&quot;</span>: &#123;<span class="string">&quot;level&quot;</span>: <span class="string">&quot;ERROR&quot;</span>, <span class="string">&quot;handlers&quot;</span>: [<span class="string">&quot;console&quot;</span>], <span class="string">&quot;propagate&quot;</span>: <span class="string">&quot;no&quot;</span>&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;root&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;level&quot;</span>: <span class="string">&quot;DEBUG&quot;</span>,</span><br><span class="line">            <span class="string">&quot;handlers&quot;</span>: [<span class="string">&quot;error_file_handler&quot;</span>, <span class="string">&quot;debug_file_handler&quot;</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br></pre></td></tr></table></figure><p>上面是一个将日志写入文件的配置示例，当日志文件大小大于<code>10M</code>后，就用一个新的文件来存放日志，总的日志文件数目是50个。<code>debug</code>的信息写入<code>debug.log</code>，<code>info</code>的信息写入<code>info.log</code>，<code>error</code>的信息写入<code>error.log</code>。日志中每一行的内容是这样的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;format&quot;: &quot;%(asctime)s - %(name)s - %(levelname)s - %(message)s&quot;&#125;</span><br></pre></td></tr></table></figure><p>各字段分别对应，日志时间 - 模块 - 日志等级 - 具体的日志内容</p><p><img src="https://image.xugaoxiang.com/imgs/2020/08/9f543f9cec8b662a.png" alt="flask-logging"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>项目部署</title>
      <link href="/2024/03/22/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
      <url>/2024/03/22/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="Flask教程-十二-项目部署"><a href="#Flask教程-十二-项目部署" class="headerlink" title="Flask教程(十二)项目部署"></a><a href="https://xugaoxiang.com/2020/07/21/flask-12-deployment/">Flask教程(十二)项目部署</a></h1><h3 id="软硬件环境"><a href="#软硬件环境" class="headerlink" title="软硬件环境"></a>软硬件环境</h3><ul><li>ubuntu 18.04 64bit</li><li>anaconda3 with <a href="https://xugaoxiang.com/tag/python/">python</a> 3.7</li><li>pycharm 2020.1.2</li><li><a href="https://xugaoxiang.com/tag/flask/">flask</a> 1.1.2</li><li><a href="https://xugaoxiang.com/tag/gunicorn/">gunicorn</a> 20.0.4</li><li><a href="https://xugaoxiang.com/tag/nginx/">nginx</a> 1.14.0</li></ul><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>Flask</code>框架内部实现了一个简易的<code>Web</code>服务器，因此在之前的教程中，我们并没有去单独安装<code>Web</code>服务器，但是如果项目要在生产环境中部署的话，其内置的服务器是不适合的，既不够稳定，也无法承受大量请求的并发，<code>Flask</code>+<code>gunicorn</code>+<code>nginx</code>+<code>supervisor</code>是最常用的<code>Flask</code>应用部署方案，本文就来一步一步进行<code>Flask</code>应用程序的部署</p><h3 id="什么是WSGI"><a href="#什么是WSGI" class="headerlink" title="什么是WSGI"></a>什么是WSGI</h3><p><code>Web Server Gateway Interface</code>，即<code>web</code>服务器网关接口，是<code>Web</code>服务器和<code>Web</code>应用程序或框架之间的一种简单而通用的接口，它是一种协议，一种规范，专门<strong>用来解决众多<code>Web</code>服务器和<code>Web</code>应用程序或框架的兼容性问题</strong>。<strong>有了<code>WSGI</code>，你不用担心你写的<code>Web</code>应用程序只能运行在某一款<code>Web</code>服务器上</strong>。</p><h3 id="gunicorn"><a href="#gunicorn" class="headerlink" title="gunicorn"></a>gunicorn</h3><p>目前<code>Flask</code>官方列出了5个常用的<code>WSGI</code>容器，它们都实现了<code>WSGI</code>，我们使用最常用的<code>gunicorn</code></p><p><img src="https://image.xugaoxiang.com/imgs/2020/07/09d7518ba4f9bb9a.png" alt="flask"></p><p>它的安装非常方便，使用<code>pip</code>即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install gunicorn</span><br></pre></td></tr></table></figure><p>接下来就可以启动<code>gunicorn</code>服务了，我们使用 <a href="https://xugaoxiang.com/2020/07/09/flask-10-wtf/">Flask教程(十)表单处理Flask-WTF</a> 中的示例，进入到源码目录，执行<code>gunicorn -w 2 -b :5000 run:app</code></p><p><strong>在windows中并不能使用gunicorn</strong>，我们可以将服务部署在ubuntu上</p><p>命令中的<code>-w</code>指的是处理请求的进程数，<code>-b</code>是指绑定本机<code>ip</code>，可以省略掉不写，使用的端口是5000，<code>run:app</code>指的是<code>run.py</code>中的<code>flask app</code>，更多参数帮助可以参照<code>gunicorn -h</code></p><p><img src="https://image.xugaoxiang.com/imgs/2020/07/37802711ac941683.png" alt="flask"></p><p>这时候在浏览器中访问<code>http://192.168.1.140:5000</code>，这里的192.168.1.140是<code>ubuntu</code>系统的<code>ip</code>地址</p><p><img src="https://image.xugaoxiang.com/imgs/2020/07/cb6a951614adcb86.png" alt="flask"></p><p>效果与<code>Flask</code>内置服务器是一模一样的</p><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p><code>nginx</code>是一个功能强大的反向代理服务器，我们使用<code>nginx</code>来转发<code>gunicorn</code>服务。为什么要在<code>gunicorn</code>之上再加层<code>nginx</code>呢？<strong>一方面<code>nginx</code>可以补充<code>gunicorn</code>在某些方面的不足，如<code>SSL</code>支持、高并发处理、负载均衡处理等，另一方面如果是做一个<code>web</code>网站，除了服务之外，肯定会有一些静态文件需要托管，这方面也是<code>nginx</code>的强项</strong></p><p>首先安装<code>nginx</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><p>编辑配置文件<code>/etc/nginx/sites-available/default</code>，修改<code>location /</code>如下</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意下这里的监听端口，访问的时候会用到</span></span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span> default_server;</span><br><span class="line"><span class="attribute">listen</span> [::]:<span class="number">80</span> default_server;</span><br><span class="line"></span><br><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">    <span class="comment"># First attempt to serve request as file, then</span></span><br><span class="line">    <span class="comment"># as directory, then fall back to displaying a 404.</span></span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://localhost:5000/;</span><br><span class="line">    <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_post</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来重启<code>nginx</code>服务</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> /etc/init.d/nginx restart</span><br></pre></td></tr></table></figure><p>这时候一定要确保<code>gunicorn</code>服务已经启动，然后访问<code>http://192.168.1.140</code></p><p><img src="https://image.xugaoxiang.com/imgs/2020/07/7e7443ccf719981e.png" alt="flask"></p><h3 id="supervisor"><a href="#supervisor" class="headerlink" title="supervisor"></a><a href="https://xugaoxiang.com/tag/supervisor/">supervisor</a></h3><p><code>supervisor</code>是一个用<code>python</code>语言编写的进程管理工具，它可以很方便的监听、启动、停止、重启一个或多个进程。当一个进程意外被杀死，<code>supervisor</code>监听到进程死后，可以很方便的让进程自动恢复，不再需要程序员或系统管理员自己编写代码来控制，更详细的使用方法请参考之前的文章 <a href="https://xugaoxiang.com/2019/12/04/supervisor/">https://xugaoxiang.com/2019/12/04/supervisor/</a></p><p>首先创建<code>/etc/supervisor/conf.d/gunicorn.conf</code>文件，这是<code>gunicorn</code>服务的配置文件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[program:gunicorn]</span><br><span class="line">command=/home/waws/anaconda3/<span class="built_in">bin</span>/gunicorn -w <span class="number">2</span> -b :<span class="number">5000</span> run:app</span><br><span class="line">directory=/home/waws/workshop/Flask-<span class="number">10</span>-wtf</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">user=waws</span><br><span class="line">redirect_stderr=true</span><br></pre></td></tr></table></figure><p>接着还是同样的方法创建<code>nginx</code>的配置文件，<code>/etc/supervisor/conf.d/nginx.conf</code>，内容是</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[program:nginx]</span><br><span class="line">command=/usr/sbin/nginx -g <span class="string">&#x27;daemon on;&#x27;</span></span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">user=root</span><br><span class="line">redirect_stderr=true</span><br></pre></td></tr></table></figure><p><code>nginx</code>是需要<code>root</code>权限的，所以<code>user</code>应该设置成<code>root</code>。最后就可以重启<code>supervisor</code>了</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/supervisor restart </span><br></pre></td></tr></table></figure><p>重启成功后，我们来查看下<code>gunicorn</code>和<code>nginx</code>是否启动正常</p><p><img src="https://image.xugaoxiang.com/imgs/2020/07/d8c90f489ba6e27c.png" alt="flask"></p><p>以及<code>Flask</code>应用是否正常</p><p><img src="https://image.xugaoxiang.com/imgs/2020/07/7e7443ccf719981e.png" alt="flask"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/03/21/hello-world/"/>
      <url>/2024/03/21/hello-world/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请微信联系管理员获取." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="bedc253e70e541f9c5f834e98c885a359b8a2901666ff8683e5595015875621e">184d5613b7d1f40c9857b7bf904a8fe31acec9007be2432e91d533814532aa57bfccbb72c2251dd4a85158b05cd241fe821d773820cac4914a93ff8cd83709c8d4b7cf58c9f692da8e98e59e34f9c7b8e6ddf364781c865828262a04d51f128b5ed814b6b12f164256d33e8a97886b28becaf688d1b83eaf3ac07452c088c32cfffc9151a3d6729d400e8324d46584c0ae284e8443312b6b9885b931a0fa65fe88f953db1b8812dec271e8bab719f710c6ba782033c08c9514053a0fe242bedf0df3279d50e3261a50f654e16293dd890210b26801b9330782f42524331be6046034804b76da1dedf2acc092cbc16be49edee64e0b4d5ccce33da7b2afa550b4ade9193a54e2437d71190746a350de003d5afc0142d2023dc954e4d859ced3c61252bf6e67569a15195e88127e6ad89edb514bf4b81d562cbe8ceeb2eafcff9e6909d9042b42e36a146f77d0b6c5e73455088731ff234bcc3de2278b31411ed18ee5dbfa7ecd35bcdccb5de06fbedd9ea2fa2bcfce8d0330bc7fd3e3aa70aed55a1754702f41f65f200ef5d6f854ab6254a8c1f18a86f7bb459a7763947e3a37847989fea09601273ff66d1a6c216dd25e3a9c2c00b54197adbed5d18eeecaed47806fb487fe56a55cad769eed8c3f1eb77657fac7c3ea5be9428d4e296867857b79c4561e823e3d9904b340dd27297e02eb84458b49d56104f4e6c34608ed397d3c711e2d995ed0fe8aeaca77ffbb17b61085243dc928427d68edf5f6f2aa047136dbcfd7424bf9b00ea8e482761c82189303debb4669d1133eba60a229f55b6735f10fc07f8b7fa85586f5c18839ec524ffb74d7810d73446dd114ae0cbf0836506da18361be5b48eeaa144705dd062e7561d99f8cd4994faf20f099054cc38ccd5cc52e274b0ef193160a5fa943e9b0a613735edfd8a7144f255f231af0ca84d5421fb483d9b233ef69fa6338414969c65930ff7a1f29825d5e1954407028f48517f71d52110e13a4abb4ff5d87d112a3268de87bf51197f08a09b6226924e15f5f51115daf114d1474e4920a857a51edae7d1228b856fefe916be9c8083b06a790ae91b2024b97f550a47b30e6500efd65c25631b48da522f7c3f2592e61c4195104b4dee7a5a2140d3ae1170e5e6eab0f83dfdbbab256c49b5d9220189979185965960c8e957aeb1673f93fd607e89f552d2be0752bdd796305cf6dafb8f05a5e2bd26ad4d30c947c903b45288fe72a483eea816f723092dfc4afb30bffa853cc835342a9a0b3fdccac5ccdf96d44f4cbd91651663d6d1554987451ad69a1b5de7ff98df1247ca8b98224d59dedbcf06d3ed09e1cc3336d1bb54327d8e678bb04a7fa22b65021015c185f15dfa9762836cc55735dcf53ca386592c171733d9bd751689f4216cc5b7e763ee90068582476356397e55565cefe4d0e6f406cae016f638b904e5c69f8e3b1e6a621f2cbc86befe2dc7f8bd37fe000172bf2b6685dfa97b14809fd75ba57ddc7242fd110687837a41da472e73442973e261e05608b01f2c2d2b3be64432ca8456a578522a18bc0f03cef92a6336bdb8a68c7b87fad6a7e3e32da02503f8c6fb5f9b7d653e3ac875f5abb5e121a74eded44664e213fadf75169110b732094dd493c3b90557e9552282b554e79cf42b4c4fc7c31a7b99e132f18fcccb23acf36685a56e222a10147ff81909006e5002386cfe9af4dd1f03c70ea2e87fe7e26ec69c5e0f91f7296feac1d874f843d950678cc29810e4f65e1c1622556df2b83b866b0f0dda0376f4fa48758a0db030024df6eed60e112de10401d05684155e6f39dba2ccbaf0dfa7a2b5f7c01a3549240cb2fbab76f01e8ef9418f53be527b83efa417a775fa9e96113b18f717ff529e826a9a48f6a8a2cf1ab81492d18df17c45e9ad21e785bbb1bf046830d9ca41f03ed5d73b576b277bf8bf732f259b1f2b5f4654a04ed2eb99b940813cbeb20c819d4e721c1ba16a1d0a6c9b39cd8f8e7e4f96c5b5f72314c184679391e08eaff0b98182a3d2da91a496a766fe3606f02744a05405968ce5f6c921064d3e05385e612318a5d64022e09afea5152a6297e553a23958c6d0829fca779a540719e5bdb199818140d851dd165b86f1dfbae43a863c58c1d296937a1931681267211b0bbfa7240737aa9e775a5d4032bb1a579dc7a0854f3553090081da080b4bffbeeaa20c82d9d8296b475ab994955527c562892932951e7637b5a32561188c7eb81541b28646f187b8e21053707e0b096a445424ba1860524380fadd6dc85a50c49564701f54fc80c81ea9a33ec1da56ab449af90a9af5d7abc47083277a820927cbdcee2395635fc8871a2fe2799964d3cbd52a31b9732eec2729c6d682630fa06911ac31b069a527223f9c02c101756079461dd0f7d1467cacfa3e092bc1d34e9165761d18d628556fe9fa827c82c31e034aeb7658a4caba06c98bfdf52e1127b085b8b7afe7c9057b754d73de26d71dd1f20e599fc8ee53172b7d09a2b2b0f5b0713828f05c3e86034a5da9e2b70603ee24d7d24a18912fa30d9a11d8a239245ba316678ec6a6def880742e748f341588c810751f164f3479a15eaf92e96a7fa00b4a1aabcce4e14efba1941ddc164bc2c46fb09801697a88ef1405394c29b96698c8994cdcf3f150099a5a4357cbaaff69558dcfebc72e177bdad9d0cafc548b2edd7c9c6defb62b647a70c8b55041d673158689b998f1aa4c94d5440a3d73430f5d4ae28e247eaf4e6e514c851588449ca1c50eb1381eb8bc236f98628686086f9f5bfba3e0702645fd6091821de27978e5671c1b47c13d8d0b50a9c13819c2004e1214f778a34acde550bb92fe856060ab063fa5653986cb3d757f37a59cd60a3a69c7b7412dbbd574ec368f20302551193a9cde2cfaf2323ef1a62658b0ca50eefcb90f2287291d7c463f1073c5ed6b5e602a94868fcc422c6986b03bddc15a87eef89cfb94a97a46462c9e753f97114fb2afe51750ebd4d919f91eeceecf2f2be613620484160ae823643ab27c28ed6b025492f20368357debee0fb4344e20777a93fe72865a9164d5fe6c8a737b96b9d0391c460cfdbdd555fe372105becb8b4746c3ddad5769a5d727e25fb2267b613f22bd3b0f5ee8aaaa0bd5b8745dedd1a2a990831f15eec6b3376e68f0e6b13dd7503b237f49af3271773313945727eb31c0e6d7883f5751a539a07a76366c11a739bd1c36ff2f7df4f06f4e51fbf247d682aada53e5fac08edc8431923dc217b2ba52965b9fc9a412cbc0011f50b75e72e518bccec48ce209d47789c807f6fc41c8e69962c26caa0e9f3d397f8e87249566308293f45a52bb17d33bdf16c2e78bd36ba6424d7899fef05791aa00ef8d82a05dfac020c4d8ad42a3c5bbeed7939a5684a8c7f07d93c374bfc946737d30bc240f373905b44ffc4301e103e7672a5519d612b0a68eac8151fa75f82e69443a1e1366fa378164e4b193ad56e500c00df102b00b4bd8bdd5974b7ac34e36cff5c3b80fb58ab8cc2b9c75272ed664bdf1da0960a8d9dda931e4861cd68683b9b36f61014b4a8403d1afcad4a923cdbe9514d44b6507cb3ce04ad795b7b3ce24627b85d75aa443d9a895fd2e57ae1acf19e1fe8291180cf39e9489153eb6e23a565210bf6b656ee922c75567e2b40eebb9c15efacceb1b0b1b234059e0c6e3686f578</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-surge">      <input class="hbe hbe-input-field hbe-input-field-surge" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-surge" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-surge" data-content="您好, 这里需要密码, 请微信联系博主获取.">您好, 这里需要密码, 请微信联系博主获取.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-surge" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M1200,9c0,0-305.005,0-401.001,0C733,9,675.327,4.969,598,4.969C514.994,4.969,449.336,9,400.333,9C299.666,9,0,9,0,9v43c0,0,299.666,0,400.333,0c49.002,0,114.66,3.484,197.667,3.484c77.327,0,135-3.484,200.999-3.484C894.995,52,1200,52,1200,52V9z"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
