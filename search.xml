<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>文件上传</title>
      <link href="/2024/03/22/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2024/03/22/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Flask教程-七-文件上传"><a href="#Flask教程-七-文件上传" class="headerlink" title="Flask教程(七)文件上传"></a><a href="https://xugaoxiang.com/2020/03/20/flask-7-file-upload/">Flask教程(七)文件上传</a></h1><h3 id="软硬件环境"><a href="#软硬件环境" class="headerlink" title="软硬件环境"></a>软硬件环境</h3><ul><li>Windows 10 64bit</li><li>Anaconda3 with <a href="https://xugaoxiang.com/tag/python/">python</a> 3.7</li><li>PyCharm 2019.3</li><li>Flask 1.1.1</li></ul><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>文件上传是个经常碰到的问题。其中涉及很多的内容比如文件的上传、文件类型的过滤，文件大小的限制，文件重命名，文件目录管理等等。下面我们来看看最基本的上传功能的实现，至于提到的其它问题，大家可以自己摸索摸索。</p><h3 id="Flask处理文件上传"><a href="#Flask处理文件上传" class="headerlink" title="Flask处理文件上传"></a>Flask处理文件上传</h3><p>在<code>Flask</code>中进行文件上传，需要在通过<code>html</code>中的<code>form</code>表单，而且需要设置<code>enctype=multipart/form-data</code>，看下面的实例</p><p><code>index.html</code>文件内容</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>upload<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span> = <span class="string">&quot;/success&quot;</span> <span class="attr">method</span> = <span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Upload&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要就是一个<code>form</code>表单，使用的<code>http</code>方法是<code>POST</code>并且设置<code>enctype=&quot;multipart/form-data&quot;</code>，<code>input</code>标签的类型是<code>file</code>，接下来还需要编写一个<code>html</code>，用来显示上传成功后的信息</p><p><code>success.html</code>文件内容</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>File uploaded successfully!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>File Name: <span class="tag">&lt;<span class="name">b</span>&gt;</span> &#123;&#123;name&#125;&#125; <span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后来看看<code>Flask</code>端的处理代码，<code>run.py</code>文件内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/success&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">success</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        f = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        f.save(f.filename)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;success.html&#x27;</span>, name=f.filename)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;127.0.0.1&quot;</span>,port=<span class="number">5000</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>注意到<code>success</code>方法中，只处理<code>POST</code>请求，并从请求对象中的<code>files</code>获取到文件的内容，调用<code>save</code>保存文件，渲染网页时，将文件名传递过去，文件名会在<code>success.html</code>中显示</p><p>启动<code>Flask</code>服务，访问<a href="http://127.0.0.1:5000/">http://127.0.0.1:5000</a></p><p><img src="https://image.xugaoxiang.com/imgs/2020/12/92777c31881f0a5f.png" alt="flask"></p><p>点击<code>选择文件</code>，在弹出框中选择需要上传的文件，然后点击<code>Upload</code></p><p><img src="https://image.xugaoxiang.com/imgs/2020/12/3b3cc78a98b70938.png" alt="flask"></p><p>来到<code>pycharm</code>可以看到刚刚接收到的文件<code>python_logo.png</code></p><p><img src="https://image.xugaoxiang.com/imgs/2020/12/a3ee8dded624982b.png" alt="flask"></p>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
          <category> 文件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>添加favicon</title>
      <link href="/2024/03/22/%E6%B7%BB%E5%8A%A0favicon/"/>
      <url>/2024/03/22/%E6%B7%BB%E5%8A%A0favicon/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Flask教程-二十一-添加favicon"><a href="#Flask教程-二十一-添加favicon" class="headerlink" title="Flask教程(二十一)添加favicon"></a>Flask教程(二十一)添加favicon</h1><h3 id="软硬件环境"><a href="#软硬件环境" class="headerlink" title="软硬件环境"></a>软硬件环境</h3><ul><li>windows 10 64bit</li><li>anaconda3 with <a href="https://xugaoxiang.com/tag/python/">python</a> 3.7</li><li><a href="https://xugaoxiang.com/tag/flask/">flask</a> 1.1.2</li></ul><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>favicon</code>是<code>favorites icon</code>的缩写，是指在网页浏览器显示在标签页或者历史记录里的图标。这个图标能帮助用户将您的网站与其他网站区分开。</p><p><img src="https://image.xugaoxiang.com/imgs/2020/11/7935912149734132.png" alt="favicon"></p><h3 id="图片转icon"><a href="#图片转icon" class="headerlink" title="图片转icon"></a>图片转icon</h3><p><code>favicon</code>文件的尺寸通常比较小，常见的尺寸有16x16，32x32和48x48。我们准备一张<code>jpg</code>或者<code>png</code>的图片，来到在线的转换站点进行转换</p><p><a href="https://favicon.io/favicon-converter/">https://favicon.io/favicon-converter/</a></p><p><img src="https://image.xugaoxiang.com/imgs/2020/11/97f22b79c104aa15.png" alt="favicon"></p><h3 id="flask中如何处理？"><a href="#flask中如何处理？" class="headerlink" title="flask中如何处理？"></a>flask中如何处理？</h3><p>我们简单写个<code>flask</code>应用，这个应该非常熟练了，<code>app.py</code>内容为</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>创建模板文件<code>index.html</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;favicon.ico&#x27;) &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Favicon<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello favicon<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后将转换好的<code>icon</code>文件放到<code>static</code>文件夹下，文件名为<code>favicon.ico</code></p><p>最后启动<code>flask</code>服务后，访问<code>http://127.0.0.1:5000</code>，在浏览器地址栏左侧就可以看到<code>favicon</code>了</p><p><img src="https://image.xugaoxiang.com/imgs/2020/11/e5bc8003b837731d.png" alt="favicon"></p>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库操作flask_sqlalchemy</title>
      <link href="/2024/03/22/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9Cflask_sqlalchemy/"/>
      <url>/2024/03/22/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9Cflask_sqlalchemy/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Flask教程-十一-数据库操作flask-sqlalchemy"><a href="#Flask教程-十一-数据库操作flask-sqlalchemy" class="headerlink" title="Flask教程(十一)数据库操作flask_sqlalchemy"></a><a href="https://xugaoxiang.com/2020/07/14/flask-11-sqlalchemy/">Flask教程(十一)数据库操作flask_sqlalchemy</a></h1><h3 id="软硬件环境"><a href="#软硬件环境" class="headerlink" title="软硬件环境"></a>软硬件环境</h3><ul><li>windows 10 64bit</li><li>anaconda3 with <a href="https://xugaoxiang.com/tag/python/">python</a> 3.7</li><li>pycharm 2020.1.2</li><li><a href="https://xugaoxiang.com/tag/flask/">flask</a> 1.1.2</li><li><a href="https://xugaoxiang.com/tag/sqlite/">sqlite</a>3</li></ul><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在<code>web</code>开发中，离不开数据库操作。前文我们已经介绍过<code>SQLAlchemy</code>这个<code>ORM</code>, <a href="https://xugaoxiang.com/2020/06/16/python-sqlalchemy-mysql/">python使用sqlalchemy操作mysql数据库</a>, 真的非常简单好用。<code>Flask-SQLAlchemy</code>是<code>flask</code>的扩展，它将<code>SQLAlchemy</code>的支持带到了<code>flask</code>应用程序中</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用老方法安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install flask_sqlalchemy</span><br></pre></td></tr></table></figure><h3 id="sqlite安装"><a href="#sqlite安装" class="headerlink" title="sqlite安装"></a><a href="https://xugaoxiang.com/tag/sqlite/">sqlite</a>安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SQLAlchemy`操作`mysql`的示例前面已经演示过了，这次我们使用`sqlite`数据库。`sqlite`是一款轻量级的数据库，可以很方便的在嵌入式设备或者移动设备上使用，支持主流的操作系统`win`、`linux`、`macOS`、`android`等，目前版本已经发展到了`sqlite3</span><br></pre></td></tr></table></figure><p>来到官方站点 <a href="https://www.sqlite.org/download.html%EF%BC%8C%E6%A0%B9%E6%8D%AE%E8%87%AA%E5%B7%B1%E7%9A%84%E5%B9%B3%E5%8F%B0%E8%BF%9B%E8%A1%8C%E9%80%89%E6%8B%A9%E4%B8%8B%E8%BD%BD">https://www.sqlite.org/download.html，根据自己的平台进行选择下载</a></p><p><img src="https://image.xugaoxiang.com/imgs/2020/07/e5b026f717a1e8ef.png" alt="flask-sqlalchemy"></p><p>将下载下来的2个压缩包分别加压缩，然后将里面的文全部件放在一个文件夹里，方便使用，然后将这个文件夹的路径加入到系统的环境变量里</p><p><img src="https://image.xugaoxiang.com/imgs/2020/07/54e85b8e3986a781.png" alt="flask-sqlalchemy"></p><p><img src="https://image.xugaoxiang.com/imgs/2020/07/8e428dab159ca513.png" alt="flask-sqlalchemy"></p><p>然后，我们在任意位置，打开终端，就都可以直接使用<code>sqlite.exe</code>了</p><p><img src="https://image.xugaoxiang.com/imgs/2020/07/64cc08d83b0a63be.png" alt="flask-sqlalchemy"></p><p>如果不熟悉<code>sql</code>的命令的话，可以使用图形化客户端，这里推荐一个工具，它是一个开源的项目，可以下面的地址进行下载</p><p><a href="https://sqlitebrowser.org/dl/">https://sqlitebrowser.org/dl/</a></p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>这里还是使用上一节 <a href="https://xugaoxiang.com/2020/07/09/flask-10-wtf/">Flask教程(十)表单处理Flask-WTF</a> 中的用户注册是示例，在原来的基础上进行修改，当用户提交注册信息的时候，<code>flask</code>会去数据库中进行查询，如果用户名不存在则将用户信息写入<code>sqlite</code>，否则给出无效用户名的错误信息，要求用户重新填写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request</span><br><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> SubmitField, StringField, PasswordField</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> DataRequired, EqualTo, Length, Email</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&quot;xxx&quot;</span></span><br><span class="line"><span class="comment"># 设置数据库URI</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;sqlite:///member.sqlite3&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用app作为参数实例化一个SQLAlchemy类的对象</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建会员模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Member</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(<span class="string">&#x27;id&#x27;</span>, db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">45</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    email = db.Column(db.String(<span class="number">45</span>))</span><br><span class="line">    password = db.Column(db.String(<span class="number">128</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, username, email, password</span>):</span><br><span class="line">        self.username = username</span><br><span class="line">        self.email = email</span><br><span class="line">        self.password = password</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据表</span></span><br><span class="line">db.create_all()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用WTF实现表单，自定义一个表单类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegisterForm</span>(<span class="title class_ inherited__">FlaskForm</span>):</span><br><span class="line">    username = StringField(label=<span class="string">&#x27;用户名: &#x27;</span>, validators=[DataRequired()])</span><br><span class="line">    email = StringField(label=<span class="string">&#x27;邮箱: &#x27;</span>, validators=[DataRequired(), Email(message=<span class="string">&#x27;邮箱格式错误&#x27;</span>)])</span><br><span class="line">    password = PasswordField(label=<span class="string">&#x27;密码: &#x27;</span>, validators=[DataRequired(), Length(<span class="number">6</span>, <span class="number">16</span>, message=<span class="string">&#x27;密码格式错误&#x27;</span>)])</span><br><span class="line">    password2 = PasswordField(label=<span class="string">&#x27;确认密码: &#x27;</span>, validators=[DataRequired(), Length(<span class="number">6</span>, <span class="number">16</span>, message=<span class="string">&#x27;密码格式错误&#x27;</span>), EqualTo(<span class="string">&#x27;password&#x27;</span>, message=<span class="string">&#x27;密码不一致&#x27;</span>)])</span><br><span class="line">    submit = SubmitField(label=<span class="string">&#x27;注册&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GEt&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    register_form = RegisterForm()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> register_form.validate_on_submit():</span><br><span class="line">            username = request.form.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">            email = request.form.get(<span class="string">&#x27;email&#x27;</span>)</span><br><span class="line">            password = request.form.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 判断数据库中是否已经存在相同的用户名</span></span><br><span class="line">            <span class="keyword">if</span> Member.query.filter_by(username=username).<span class="built_in">all</span>():</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;Invalid username&#x27;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 构建数据库记录并写入数据库</span></span><br><span class="line">            member = Member(username=username, email=email, password=password)</span><br><span class="line">            db.session.add(member)</span><br><span class="line">            db.session.commit()</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Register success.&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Invalid&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 把实例化后的register_form传入到页面register.html中</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>, form=register_form)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;127.0.0.1&quot;</span>,port=<span class="number">5000</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>模板文件跟原来的一样，只有一个<code>form</code>表单，没有做任何修改</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.csrf_token() &#125;&#125;</span><br><span class="line">        &#123;&#123; form.username.label &#125;&#125; &#123;&#123; form.username &#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.email.label &#125;&#125; &#123;&#123; form.email  &#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.password.label &#125;&#125; &#123;&#123; form.password &#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.password2.label &#125;&#125; &#123;&#123; form.password2 &#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.submit &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>程序运行起来后，访问<code>http://127.0.0.1:5000</code>，输入满足条件的注册信息</p><p><img src="https://image.xugaoxiang.com/imgs/2020/07/6b089ae9698bb29e.png" alt="flask-sqlalchemy"></p><p><img src="https://image.xugaoxiang.com/imgs/2020/07/4c0b742f4266f95f.png" alt="flask-sqlalchemy"></p><p>在项目根目录生成了数据库文件<code>member.sqlite3</code></p><p><img src="https://image.xugaoxiang.com/imgs/2020/07/ae57b1fb7feb11dd.png" alt="flask-sqlalchemy"></p><p>使用图形化工具<code>DB Browser</code>打开<code>member.sqlite3</code>可以看到刚才注册成功的用户信息，利用工具，可以很方便的进行数据的增删改查</p><p><img src="https://image.xugaoxiang.com/imgs/2020/07/c459a67b7b6cb9f3.png" alt="flask-sqlalchemy"></p><p>如果用户名已经被注册过了，则页面提示错误信息，相应的信息也不会被写入数据库</p><p><img src="https://image.xugaoxiang.com/imgs/2020/07/298f3cc169e78604.png" alt="flask-sqlalchemy"></p><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>如果出现警告</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UserWarning SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead</span><br></pre></td></tr></table></figure><p>可以通过设置<code>app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = True</code>来消除上面的警告</p>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闪现信息</title>
      <link href="/2024/03/22/%E9%97%AA%E7%8E%B0%E6%B6%88%E6%81%AF/"/>
      <url>/2024/03/22/%E9%97%AA%E7%8E%B0%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Flask教程-九-闪现消息"><a href="#Flask教程-九-闪现消息" class="headerlink" title="Flask教程(九)闪现消息"></a><a href="https://xugaoxiang.com/2020/03/25/flask-9-flash/">Flask教程(九)闪现消息</a></h1><h3 id="软硬件环境"><a href="#软硬件环境" class="headerlink" title="软硬件环境"></a>软硬件环境</h3><ul><li>Windows 10 64bit</li><li>Anaconda3 with <a href="https://xugaoxiang.com/tag/python/">python</a> 3.7</li><li>PyCharm 2019.3</li><li>Flask 1.1.1</li></ul><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在<code>web</code>应用中，经常需要对用户的操作实施反馈，好让用户知道到底发生了什么事。最常见的方式自然是在网页上显示一些字符，可以是确认消息、警告或者错误提醒。</p><h3 id="Flask实现"><a href="#Flask实现" class="headerlink" title="Flask实现"></a>Flask实现</h3><p>在<code>Flask</code>中，使用<code>flash message</code>(闪现消息)，具体使用的方法是<code>flash()</code></p><blockquote><p>flash(message, category)</p></blockquote><p>其中<br>* message: 具体的消息内容<br>* category: 可选参数，表示消息类型，比如错误、警告等</p><p>在视图函数中发送了消息，自然的，就需要在模板文件中取出消息，我们使用方法<code>get_flashed_message</code></p><blockquote><p>get_flashed_messages(with_categories, category_filter)</p></blockquote><p>其中2个参数都是可选参数</p><ul><li>with_categories: 消息类型，与上面的<code>flash</code>匹配</li><li>category_filter: 过滤条件</li></ul><p>下面看个完整的实例</p><p><code>run.py</code>文件内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect, url_for, flash</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&quot;xxx&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    error = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        <span class="keyword">if</span> request.form[<span class="string">&#x27;email&#x27;</span>] != <span class="string">&#x27;test@gmail.com&#x27;</span> <span class="keyword">or</span> request.form[<span class="string">&#x27;password&#x27;</span>] != <span class="string">&#x27;test&#x27;</span>:</span><br><span class="line">            error = <span class="string">&quot;Invalid account.&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flash(<span class="string">&quot;Login successfully&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, error=error)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;127.0.0.1&quot;</span>,port=<span class="number">5000</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>当邮箱和密码输入正确的时候，调用<code>flash</code>方法</p><p>模板文件<code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% with messages = get_flashed_messages() %&#125;</span><br><span class="line">         &#123;% if messages %&#125;</span><br><span class="line">               &#123;% for message in messages %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">               &#123;% endfor %&#125;</span><br><span class="line">         &#123;% endif %&#125;</span><br><span class="line">    &#123;% endwith %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Welcome!<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;&#123;&#123; url_for(&#x27;login&#x27;) &#125;&#125;&quot;</span>&gt;</span>login<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过调用<code>get_flashed_messages</code>方法获取到所有的消息，然后使用<code>for-in</code>的循环显示出每一条消息。页面的底部，我们放置一个超链接，用于跳转到<code>login</code>页面</p><p><code>login.html</code>文件内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span> = <span class="string">&quot;post&quot;</span> <span class="attr">action</span> = <span class="string">&quot;http://localhost:5000/login&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&#x27;email&#x27;</span> <span class="attr">name</span> = <span class="string">&#x27;email&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&#x27;password&#x27;</span> <span class="attr">name</span> = <span class="string">&#x27;password&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;submit&quot;</span> <span class="attr">value</span> = <span class="string">&quot;Submit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;% if error %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Error<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>: &#123;&#123; error &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是前面我们介绍过的简单登录界面，最下面用于显示出错信息</p><p>最后启动下<code>Flask</code>服务，访问<a href="http://127.0.0.1:5000/">http://127.0.0.1:5000</a></p><p><img src="https://image.xugaoxiang.com/imgs/2020/12/5b650bda89543ca0.png" alt="flask"></p><p>输入<code>email</code>和<code>password</code></p><p><img src="https://image.xugaoxiang.com/imgs/2020/12/a0370dc596ceaf0c.png" alt="flask"></p><p>出错，显示无效账户信息</p><p><img src="https://image.xugaoxiang.com/imgs/2020/12/fcbab509c41c0390.png" alt="flask"></p><p>成功，显示欢迎信息</p><p><img src="https://image.xugaoxiang.com/imgs/2020/12/8e693af00c6122d7.png" alt="flask"></p>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 计算机 </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志</title>
      <link href="/2024/03/22/%E6%97%A5%E5%BF%97/"/>
      <url>/2024/03/22/%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Flask教程-十五-日志"><a href="#Flask教程-十五-日志" class="headerlink" title="Flask教程(十五)日志"></a><a href="https://xugaoxiang.com/2020/08/25/flask-15-logging/">Flask教程(十五)日志</a></h1><h3 id="软硬件环境"><a href="#软硬件环境" class="headerlink" title="软硬件环境"></a>软硬件环境</h3><ul><li>windows 10 64bit</li><li>anaconda3 with <a href="https://xugaoxiang.com/tag/python/">python</a> 3.7</li><li>pycharm 2020.1.2</li><li><a href="https://xugaoxiang.com/tag/flask/">flask</a> 1.1.2</li></ul><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>flask</code>日志使用标准的<code>python logging</code>。所有与<code>flask</code>相关的消息都用<code>app.logger</code>来记录，同样的，这个日志记录器也可用于你自己的日志记录。</p><p><code>logging</code>是<code>python</code>自带的系统模块，在 <a href="https://xugaoxiang.com/category/python%E7%BC%96%E7%A8%8B/python%E5%AE%9E%E7%94%A8%E6%A8%A1%E5%9D%97/"><code>python</code>实用模块</a> 板块，我们已经介绍过它的使用方法，不了解的童鞋可以去看看，链接是 <a href="https://xugaoxiang.com/2019/12/04/python-module-logging/">https://xugaoxiang.com/2019/12/04/python-module-logging/</a></p><h3 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h3><p>在<code>flask</code>中，不用任何配置就可以使用<code>app.logger</code>，如下示例</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    user = get_user(request.form[<span class="string">&#x27;username&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> user.check_password(request.form[<span class="string">&#x27;password&#x27;</span>]):</span><br><span class="line">        login_user(user)</span><br><span class="line">        app.logger.info(<span class="string">f&#x27;<span class="subst">&#123;user.username&#125;</span> logged in successfully.&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        app.logger.info(<span class="string">f&#x27;<span class="subst">&#123;user.username&#125;</span> failed to log in&#x27;</span>)</span><br><span class="line">        abort(<span class="number">401</span>)</span><br></pre></td></tr></table></figure><p>默认情况下，<code>flask</code>会自动添加一个<code>StreamHandler</code>到<code>app.logger</code>。在请求过程中，它会写到由<code>WSGI</code>服务器指定的，保存在<code>environ[&#39;wsgi.errors&#39;]</code>变量中的日志流(通常是<code>sys.stderr</code>)中。在请求之外，则会记录到<code>sys.stderr</code>。</p><p>如果你对日志默认配置不太满意的话，可以自行设置。当想要为项目配置日志时，应当在创建应用对象之前进行配置。 如果晚了，那么<code>app.logger</code>就会成为缺省记录器。下面我们使用<code>logging.config.dictConfig</code>来配置日志，看示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging.config</span><br><span class="line"></span><br><span class="line">logging.config.dictConfig(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;version&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;disable_existing_loggers&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">        <span class="string">&quot;formatters&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;simple&quot;</span>: &#123;<span class="string">&quot;format&quot;</span>: <span class="string">&quot;%(asctime)s - %(name)s - %(levelname)s - %(message)s&quot;</span>&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;handlers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;console&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;class&quot;</span>: <span class="string">&quot;logging.StreamHandler&quot;</span>,</span><br><span class="line">                <span class="string">&quot;level&quot;</span>: <span class="string">&quot;DEBUG&quot;</span>,</span><br><span class="line">                <span class="string">&quot;formatter&quot;</span>: <span class="string">&quot;simple&quot;</span>,</span><br><span class="line">                <span class="string">&quot;stream&quot;</span>: <span class="string">&quot;ext://sys.stdout&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;info_file_handler&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;class&quot;</span>: <span class="string">&quot;logging.handlers.RotatingFileHandler&quot;</span>,</span><br><span class="line">                <span class="string">&quot;level&quot;</span>: <span class="string">&quot;INFO&quot;</span>,</span><br><span class="line">                <span class="string">&quot;formatter&quot;</span>: <span class="string">&quot;simple&quot;</span>,</span><br><span class="line">                <span class="string">&quot;filename&quot;</span>: <span class="string">&quot;info.log&quot;</span>,</span><br><span class="line">                <span class="string">&quot;maxBytes&quot;</span>: <span class="number">10485760</span>,</span><br><span class="line">                <span class="string">&quot;backupCount&quot;</span>: <span class="number">50</span>,</span><br><span class="line">                <span class="string">&quot;encoding&quot;</span>: <span class="string">&quot;utf8&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;error_file_handler&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;class&quot;</span>: <span class="string">&quot;logging.handlers.RotatingFileHandler&quot;</span>,</span><br><span class="line">                <span class="string">&quot;level&quot;</span>: <span class="string">&quot;ERROR&quot;</span>,</span><br><span class="line">                <span class="string">&quot;formatter&quot;</span>: <span class="string">&quot;simple&quot;</span>,</span><br><span class="line">                <span class="string">&quot;filename&quot;</span>: <span class="string">&quot;errors.log&quot;</span>,</span><br><span class="line">                <span class="string">&quot;maxBytes&quot;</span>: <span class="number">10485760</span>,</span><br><span class="line">                <span class="string">&quot;backupCount&quot;</span>: <span class="number">20</span>,</span><br><span class="line">                <span class="string">&quot;encoding&quot;</span>: <span class="string">&quot;utf8&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;debug_file_handler&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;class&quot;</span>: <span class="string">&quot;logging.handlers.RotatingFileHandler&quot;</span>,</span><br><span class="line">                <span class="string">&quot;level&quot;</span>: <span class="string">&quot;DEBUG&quot;</span>,</span><br><span class="line">                <span class="string">&quot;formatter&quot;</span>: <span class="string">&quot;simple&quot;</span>,</span><br><span class="line">                <span class="string">&quot;filename&quot;</span>: <span class="string">&quot;debug.log&quot;</span>,</span><br><span class="line">                <span class="string">&quot;maxBytes&quot;</span>: <span class="number">10485760</span>,</span><br><span class="line">                <span class="string">&quot;backupCount&quot;</span>: <span class="number">50</span>,</span><br><span class="line">                <span class="string">&quot;encoding&quot;</span>: <span class="string">&quot;utf8&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;loggers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;my_module&quot;</span>: &#123;<span class="string">&quot;level&quot;</span>: <span class="string">&quot;ERROR&quot;</span>, <span class="string">&quot;handlers&quot;</span>: [<span class="string">&quot;console&quot;</span>], <span class="string">&quot;propagate&quot;</span>: <span class="string">&quot;no&quot;</span>&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;root&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;level&quot;</span>: <span class="string">&quot;DEBUG&quot;</span>,</span><br><span class="line">            <span class="string">&quot;handlers&quot;</span>: [<span class="string">&quot;error_file_handler&quot;</span>, <span class="string">&quot;debug_file_handler&quot;</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br></pre></td></tr></table></figure><p>上面是一个将日志写入文件的配置示例，当日志文件大小大于<code>10M</code>后，就用一个新的文件来存放日志，总的日志文件数目是50个。<code>debug</code>的信息写入<code>debug.log</code>，<code>info</code>的信息写入<code>info.log</code>，<code>error</code>的信息写入<code>error.log</code>。日志中每一行的内容是这样的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;format&quot;: &quot;%(asctime)s - %(name)s - %(levelname)s - %(message)s&quot;&#125;</span><br></pre></td></tr></table></figure><p>各字段分别对应，日志时间 - 模块 - 日志等级 - 具体的日志内容</p><p><img src="https://image.xugaoxiang.com/imgs/2020/08/9f543f9cec8b662a.png" alt="flask-logging"></p>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Games </tag>
            
            <tag> 日志 </tag>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目部署</title>
      <link href="/2024/03/22/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
      <url>/2024/03/22/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Flask教程-十二-项目部署"><a href="#Flask教程-十二-项目部署" class="headerlink" title="Flask教程(十二)项目部署"></a><a href="https://xugaoxiang.com/2020/07/21/flask-12-deployment/">Flask教程(十二)项目部署</a></h1><h3 id="软硬件环境"><a href="#软硬件环境" class="headerlink" title="软硬件环境"></a>软硬件环境</h3><ul><li>ubuntu 18.04 64bit</li><li>anaconda3 with <a href="https://xugaoxiang.com/tag/python/">python</a> 3.7</li><li>pycharm 2020.1.2</li><li><a href="https://xugaoxiang.com/tag/flask/">flask</a> 1.1.2</li><li><a href="https://xugaoxiang.com/tag/gunicorn/">gunicorn</a> 20.0.4</li><li><a href="https://xugaoxiang.com/tag/nginx/">nginx</a> 1.14.0</li></ul><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>Flask</code>框架内部实现了一个简易的<code>Web</code>服务器，因此在之前的教程中，我们并没有去单独安装<code>Web</code>服务器，但是如果项目要在生产环境中部署的话，其内置的服务器是不适合的，既不够稳定，也无法承受大量请求的并发，<code>Flask</code>+<code>gunicorn</code>+<code>nginx</code>+<code>supervisor</code>是最常用的<code>Flask</code>应用部署方案，本文就来一步一步进行<code>Flask</code>应用程序的部署</p><h3 id="什么是WSGI"><a href="#什么是WSGI" class="headerlink" title="什么是WSGI"></a>什么是WSGI</h3><p><code>Web Server Gateway Interface</code>，即<code>web</code>服务器网关接口，是<code>Web</code>服务器和<code>Web</code>应用程序或框架之间的一种简单而通用的接口，它是一种协议，一种规范，专门<strong>用来解决众多<code>Web</code>服务器和<code>Web</code>应用程序或框架的兼容性问题</strong>。<strong>有了<code>WSGI</code>，你不用担心你写的<code>Web</code>应用程序只能运行在某一款<code>Web</code>服务器上</strong>。</p><h3 id="gunicorn"><a href="#gunicorn" class="headerlink" title="gunicorn"></a>gunicorn</h3><p>目前<code>Flask</code>官方列出了5个常用的<code>WSGI</code>容器，它们都实现了<code>WSGI</code>，我们使用最常用的<code>gunicorn</code></p><p><img src="https://image.xugaoxiang.com/imgs/2020/07/09d7518ba4f9bb9a.png" alt="flask"></p><p>它的安装非常方便，使用<code>pip</code>即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install gunicorn</span><br></pre></td></tr></table></figure><p>接下来就可以启动<code>gunicorn</code>服务了，我们使用 <a href="https://xugaoxiang.com/2020/07/09/flask-10-wtf/">Flask教程(十)表单处理Flask-WTF</a> 中的示例，进入到源码目录，执行<code>gunicorn -w 2 -b :5000 run:app</code></p><p><strong>在windows中并不能使用gunicorn</strong>，我们可以将服务部署在ubuntu上</p><p>命令中的<code>-w</code>指的是处理请求的进程数，<code>-b</code>是指绑定本机<code>ip</code>，可以省略掉不写，使用的端口是5000，<code>run:app</code>指的是<code>run.py</code>中的<code>flask app</code>，更多参数帮助可以参照<code>gunicorn -h</code></p><p><img src="https://image.xugaoxiang.com/imgs/2020/07/37802711ac941683.png" alt="flask"></p><p>这时候在浏览器中访问<code>http://192.168.1.140:5000</code>，这里的192.168.1.140是<code>ubuntu</code>系统的<code>ip</code>地址</p><p><img src="https://image.xugaoxiang.com/imgs/2020/07/cb6a951614adcb86.png" alt="flask"></p><p>效果与<code>Flask</code>内置服务器是一模一样的</p><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p><code>nginx</code>是一个功能强大的反向代理服务器，我们使用<code>nginx</code>来转发<code>gunicorn</code>服务。为什么要在<code>gunicorn</code>之上再加层<code>nginx</code>呢？<strong>一方面<code>nginx</code>可以补充<code>gunicorn</code>在某些方面的不足，如<code>SSL</code>支持、高并发处理、负载均衡处理等，另一方面如果是做一个<code>web</code>网站，除了服务之外，肯定会有一些静态文件需要托管，这方面也是<code>nginx</code>的强项</strong></p><p>首先安装<code>nginx</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><p>编辑配置文件<code>/etc/nginx/sites-available/default</code>，修改<code>location /</code>如下</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意下这里的监听端口，访问的时候会用到</span></span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span> default_server;</span><br><span class="line"><span class="attribute">listen</span> [::]:<span class="number">80</span> default_server;</span><br><span class="line"></span><br><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">    <span class="comment"># First attempt to serve request as file, then</span></span><br><span class="line">    <span class="comment"># as directory, then fall back to displaying a 404.</span></span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://localhost:5000/;</span><br><span class="line">    <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_post</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来重启<code>nginx</code>服务</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> /etc/init.d/nginx restart</span><br></pre></td></tr></table></figure><p>这时候一定要确保<code>gunicorn</code>服务已经启动，然后访问<code>http://192.168.1.140</code></p><p><img src="https://image.xugaoxiang.com/imgs/2020/07/7e7443ccf719981e.png" alt="flask"></p><h3 id="supervisor"><a href="#supervisor" class="headerlink" title="supervisor"></a><a href="https://xugaoxiang.com/tag/supervisor/">supervisor</a></h3><p><code>supervisor</code>是一个用<code>python</code>语言编写的进程管理工具，它可以很方便的监听、启动、停止、重启一个或多个进程。当一个进程意外被杀死，<code>supervisor</code>监听到进程死后，可以很方便的让进程自动恢复，不再需要程序员或系统管理员自己编写代码来控制，更详细的使用方法请参考之前的文章 <a href="https://xugaoxiang.com/2019/12/04/supervisor/">https://xugaoxiang.com/2019/12/04/supervisor/</a></p><p>首先创建<code>/etc/supervisor/conf.d/gunicorn.conf</code>文件，这是<code>gunicorn</code>服务的配置文件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[program:gunicorn]</span><br><span class="line">command=/home/waws/anaconda3/<span class="built_in">bin</span>/gunicorn -w <span class="number">2</span> -b :<span class="number">5000</span> run:app</span><br><span class="line">directory=/home/waws/workshop/Flask-<span class="number">10</span>-wtf</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">user=waws</span><br><span class="line">redirect_stderr=true</span><br></pre></td></tr></table></figure><p>接着还是同样的方法创建<code>nginx</code>的配置文件，<code>/etc/supervisor/conf.d/nginx.conf</code>，内容是</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[program:nginx]</span><br><span class="line">command=/usr/sbin/nginx -g <span class="string">&#x27;daemon on;&#x27;</span></span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">user=root</span><br><span class="line">redirect_stderr=true</span><br></pre></td></tr></table></figure><p><code>nginx</code>是需要<code>root</code>权限的，所以<code>user</code>应该设置成<code>root</code>。最后就可以重启<code>supervisor</code>了</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/supervisor restart </span><br></pre></td></tr></table></figure><p>重启成功后，我们来查看下<code>gunicorn</code>和<code>nginx</code>是否启动正常</p><p><img src="https://image.xugaoxiang.com/imgs/2020/07/d8c90f489ba6e27c.png" alt="flask"></p><p>以及<code>Flask</code>应用是否正常</p><p><img src="https://image.xugaoxiang.com/imgs/2020/07/7e7443ccf719981e.png" alt="flask"></p>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 计算机 </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/03/21/hello-world/"/>
      <url>/2024/03/21/hello-world/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请微信联系管理员获取." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="cec54f34d647805c22085d125ec24529598f9b18465f67aa4a74ad82a871e9fe">184d5613b7d1f40c9857b7bf904a8fe36763f41fad38a324569baffd9e9b9270647ec6fffb73b5e137740c8138634aaa6c83d30703f081a724b3085fc525af138516d2def46c6c250cffc8a41b8b17e040322010a66a30f5273a596f9a81d256cfe2c93489c3f3ca5ddcbaa087bec5b93fde6f5729abd8c262d881eea92c5580afaba5d2c3b918c31f296edd08878e32ba9c05e1aa1b5dc88ccc8058e640b37ca75242f3e62d38ee1d209e368215ddbad3413a7f8f65768f0206aa5874136289d73ee3914ea2e9539ae294400a36def0ee5f23f5cc5c9af6f976dd3f6cb6e6499cc20a231042c9d3fd4a1bc2157451aebf3002d0d45fefbf7652dc9e482142428b7e27f0aea9c25a3ecf6a60362b1485d724ef8c409810d27700ae67fe78d7bb92da1bb023b91ee00932d5d97a314723b19cdafd0cea0d5569b1548064f98036a1f4c9776b43cb506d0fc28d1fb8c1ccfafa5e26248bc76e5951f0dd5a4633352b6ebeb5faf4ae37014763b62ec77afd185f697ce6648211188b0118e163e9c8f3e61a046914a13b7dc06f7bce826ce4e3eaf1775cc721a27619bcfedcbb7e067298476b5bbfde1ffc5bb488f6ffd979a9eafb2a9cf39de2fe65a2a8d46606838747a9a06f51dad54f3bf0726bbc359ffdca4be2d36a34e43b75b9dd95bdf5b68cca2a0670e2e2918ccde6a05837200b0f2ed6cb0494ba53686568dfc6243e4ae7b72b201f3feebc2bb201c26bfdb6f08c4e6d392eea6fa06738b065f4bae22afd2b543fd39d946e3c5f8fbe025a00edb46c418312781313269e39a450b223195c776764baa7c736bde79a52b5a196a1eab7c5df97d69525122b5a60a71fde4f7b8650e09919e3ac80e49e73e0a9029af26f61aaec49991cd3e692c083e9969b3e9a126331bc6be9a05687f2fa86474af049c5e6007ea5d616115df5362a2b8c36e779f3d8bf622940509b72dc808116837ca311542f4340f14effe4264b200f3ce059d45b522bc40011a3faa089c30a9a5bec10d3d994d3b2d38b06d5a39e88c1957d16f1483e5f628f254e09d3bc11846fef261e0982d98ce4972a4f5f18cb1e98b30ea3fb9ff624658fc49e4c3fc97ac10cc3099ef38ecfb94a86b65b912322a89bc3393ba5fd8a7948f4e38e9496931bc905f5ef23953dc28adda60bc4832384e283163e548df1ec1eb83793fd4ac5fa35732f2b279394a0d7aaedf7e352dbb8a91816b1a009ab35d592625e3893b00e4850a996998a48ebcbfdb180796441905d5201530b9dcbf3ca12fe54585a68c679c6b3d1b367e7e2a76c56937993eff21f571398f154bb3a747b6a44bcb340f3ef57c89c786bee0effa6e6d7b53608599b9f968bfce206ff1cfe2f20952f10131672ba2a33606545d4741b71f3e065de309f1fbf2781b70fa63770dfd047159ceecea220d41b73d7c4b86c874b73e8409e080aabb168f94cb3f09a7f6745e298c6a9e08fcdbccc556526f7eea1a85605e821e6dac9107f6b43e490ec3b5d4e26b4a0c8c2f1332219d6b64de94cc3ff5586f11039b2da803be54353197732f9dfb0b795e5192739cf24a31ad7209b47b09bc751155da8e6a4ac67dc832b61e5fda7cabae4085df5c64e838344fdfca0746f78de3cdb415ad254874fc960b6161d8bc691aa1a1edb6af4c846a04f94b1c63df0a504ba174905bf86053bbd2fb3682566f9f6d0f44bc6dcb1ecf39d6b225182dfef9eedf46056ece0bdb46a0dc118dd830e0cce483ed935d8b752c250ce9d16e32d19be30b8d184f0fb41858fe17ec7a97931367aef04904ee8e460c5f13aac2f9a8fbf416549c44ec1377cb3b09702d7430b18c8dfb6dacc5f508f18762946ddaef72438b6953d1cc7dedcb3472fc49189a5947933b94202c14052f74455cc83411b15294fde3055cd214e5105a6f6b8f40cbfaeaa6264b9550c622920732fdae00e79841c12e4d21f08a3a90b0322b1ba5e488bf768bb9ae0e8910d425735d61a689d57b73a4a4c08c92755d6d7fa0e24efdbe2fe9f12e4b89dde554a69b5aed5e4981316c45477040b407cf18604081c6fb3af8a881050ce43926fb7deca95609c785d96bc7e7a9406ef145a3b8e0ed91015c3c983b8828967b13b2c9a269968541e0c2f752355c05094841b621d9053d5cd8581c897e64b37518f8b12850262f759ac64548c8dc454c7e2df8573b5e4439092d7c05ea6f3b89778dcf3b5c08b8f91d87bf4f45e71288f119b6c8763f7d610685351a19366878e6def97366232c92138cb5555acabd3dc16d16e0d2c66f664e3198cd53548779f0ebcc56f8074a6ab3e97ea01517b81675a48a4745178c245b77378bcacd73fc504c396c4568688182f934620cdd6b0bf675645f9d21cc99289d989d60748f2571555a76ecbd836e1ff6122690ac1b1feb73714e5b63fa286dac56c03d85cfe07d4c0c1b2bbf457737e13c0caadd7ab996cfc2f5360f5dcd8d812a722aa27a337e08c99083c7d0be1ca940607e2e11228713a23b0f6ecbb802d6ffe7bae592ded4aaaf43e93a25feff15364c9d6484b03b64823cee38d6afa76d202af022b8f32bd66e5ec68324d75d4bff2049e3f218a124fc27afe3a409ad1927e384fe9079b545f777f4ffed5fda93c55ec8895bc2f06a4c321aa28f5997adfc5aedc2800ba99b3d796d5b7d8cf0cce5309846613ea161c9a5dd2b9316ed62bb310f5fcccf5a2db6e2e6cc8c8ec22c9e6b35af55b2447c9bd05b7a08d81e306a601cd197a13ce38090621b60c7b64976c6ec05564a0b39ea80f083be9d294efe606b41e99e37eef818bb6ad072c592096f7d931f69493733cd298fbf278088a85b771572136417bcc4b3c25e20949bc71c94e35cef6cded9a533744c7da5158f2abaf6305bb5d0c2f63ed65c331491f96e68f86b5bfad8edadcecbd0a8472d933f2e5501dce30c3ff2ffe234ecfdd2761f2aa19878ffb0f1a84f72840ca7c517a90d90d0fe85371eef74638ce850f71a6945c98ebce43fe7b2eb4b37f64c6fac5a34ab6fdf4998ee07c89dc59b491d73e4c0d4cab6bb1b6b4379adcc6b1aa88c1531ac6fcddfee92b3204da96363df6aa2d9c0019f6d55d290eb7b5c91fa2b42b9b08e29d288d710b66fea618e9eb54664b63b848b30037a3f3bca68bf3b840eec8030b44aa787c1f557ac09784d69a4becd0598c25a051f2f8880c5ed27581a2581a11aa7a9df4a64d331532d2d40c589411a990bb53f4976e8ed8eede37ff2d0fc74f2444ac383918e125f7d0382fddc75a6bfd9f94b534539f62e34cb87da15ee628c479f7c583fae30371f1775c8810eeb433cd6938a0aadf43242a6b7bd10feecaaf602f6621424efc4e7aa9484b5ce1eb8904ca0dc43ff709d10a5bf1a7ff81cb0a99c22985a92435ba72c8575fd68f1d03f490b1d53feada452f1acb62154fd9bedb78fbbc474ef886dbee17c97312f9ee6cfc460e9a81b07d830797e5d39386796fd2ee1ff629c9651868868e841cb40f817b97eecdf08cfc3acf082709c40f377d5cd7ca7d8a4d42f997f7951d7dfcf9cfbffc7d25e589d58b6a2039a8930067ce59ca35bd5743413b8a7f916d9d7bc7002eff2aa88714d8b3b4681ab1419d3156d8b524731e91fc2233deb096f73b1e759c9d9512daba0f68d92fab9a769d24008c9d9811eec98a3311b77a72b20da0d34d028e6963cb06952e02c3733148ad5c91889ccd8cf87b70ccb3ac3445ca26071d6d4972c747bbffb27adaf938021055d54b45d4d003a7931df39e1686e60be9951bd7fb296d647f6a591828c293613da2714887525b434648f392de01025a3615dea74c700a6afb7ea5260136547c2cadde173a994264cd6914e18f5cbc18fc17294236f795bc82cfd6f836eedd7321db82be88aad1217611d02d2c50df5e41a0f58442943c3366cbebb3e7afc7d371c549af99d2f891aab289dc70793a33c23a77ae02d0cff6b5e340a2f09034c04b98</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-surge">      <input class="hbe hbe-input-field hbe-input-field-surge" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-surge" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-surge" data-content="您好, 这里需要密码, 请微信联系博主获取.">您好, 这里需要密码, 请微信联系博主获取.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-surge" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M1200,9c0,0-305.005,0-401.001,0C733,9,675.327,4.969,598,4.969C514.994,4.969,449.336,9,400.333,9C299.666,9,0,9,0,9v43c0,0,299.666,0,400.333,0c49.002,0,114.66,3.484,197.667,3.484c77.327,0,135-3.484,200.999-3.484C894.995,52,1200,52,1200,52V9z"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> Games </tag>
            
            <tag> 开心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试3</title>
      <link href="/2024/03/19/%E6%B5%8B%E8%AF%953/"/>
      <url>/2024/03/19/%E6%B5%8B%E8%AF%953/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Games </tag>
            
            <tag> 日志 </tag>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试2</title>
      <link href="/2024/03/19/%E6%B5%8B%E8%AF%952/"/>
      <url>/2024/03/19/%E6%B5%8B%E8%AF%952/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="我们都是测试的文件"><a href="#我们都是测试的文件" class="headerlink" title="我们都是测试的文件"></a>我们都是测试的文件</h1><p>哈哈哈哈</p><p>基督教大家都基督教</p>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2024/03/19/%E6%B5%8B%E8%AF%95/"/>
      <url>/2024/03/19/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="python操作数据库"><a href="#python操作数据库" class="headerlink" title="python操作数据库"></a><a href="https://xugaoxiang.com/2020/06/12/python-pymysql/">python操作数据库</a></h1><h3 id="软硬件环境"><a href="#软硬件环境" class="headerlink" title="软硬件环境"></a>软硬件环境</h3><ul><li>windows 10 64bit</li><li>Python 3.7.4</li><li><a href="https://xugaoxiang.com/tag/mysql/">mysql</a> 8.0.20</li><li><a href="https://xugaoxiang.com/tag/pymysql/">pymysql</a></li></ul><p>在开发中经常涉及到数据库的使用，而<code>mysql</code>是使用最为广泛的关系型数据库，因为它开源、免费。本文就来使用<code>python</code>语言来操作<code>mysql</code>数据库。</p><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><p>来到<code>mysql</code>的官方网站下载安装包 <a href="https://dev.mysql.com/downloads/installer/%EF%BC%8C%E7%9B%AE%E5%89%8D%E7%9A%84%E7%89%88%E6%9C%AC%E5%B7%B2%E7%BB%8F%E5%88%B0%E4%BA%868.0.20%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%AE%8C%E6%88%90%E5%90%8E%EF%BC%8C%E5%8F%8C%E5%87%BB%60msi%60%E6%96%87%E4%BB%B6%E8%BF%9B%E8%A1%8C%E5%AE%89%E8%A3%85%EF%BC%8C%E9%80%89%E6%8B%A9%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%89%E8%A3%85">https://dev.mysql.com/downloads/installer/，目前的版本已经到了8.0.20，下载完成后，双击`msi`文件进行安装，选择自定义安装</a></p><p><img src="https://image.xugaoxiang.com/imgs/2020/05/b4e9d2f9a6772d9a.png" alt="img"></p><p>在左侧选择需要安装的，点击向右的箭头，右侧的框中是要安装的组件，这里我们只安装<code>server</code>和管理工具<code>workbench</code></p><p><img src="https://image.xugaoxiang.com/imgs/2020/05/8b4a7c3c1f9a59fe.png" alt="img"></p><p><img src="https://image.xugaoxiang.com/imgs/2020/05/5e3cfcc58a87fb37.png" alt="img"></p><p><img src="https://image.xugaoxiang.com/imgs/2020/05/4c48f93649914111.png" alt="img"></p><p><img src="https://image.xugaoxiang.com/imgs/2020/05/accb6c14e590fd71.png" alt="img"></p><p>默认使用的端口号是3306，保持默认</p><p><img src="https://image.xugaoxiang.com/imgs/2020/05/e50cbf5e756fd902.png" alt="img"></p><p>设置超级用户<code>root</code>的密码，如果需要添加普通用户，选择下方的<code>Add User</code></p><p><img src="https://image.xugaoxiang.com/imgs/2020/05/008225cd6b8a062d.png" alt="img"></p><p><img src="https://image.xugaoxiang.com/imgs/2020/05/da507ebe1eda5f01.png" alt="img"></p><p><img src="https://image.xugaoxiang.com/imgs/2020/05/b7ddabc0659576f0.png" alt="img"></p><p><img src="https://image.xugaoxiang.com/imgs/2020/05/f07ee9caac89c650.png" alt="img"></p><p><img src="https://image.xugaoxiang.com/imgs/2020/05/de12cd3cf9e127a7.png" alt="img"></p><p>安装完毕后，使用<code>workbench</code>创建一个数据库连接，填上<code>ip</code>、端口和用户名</p><p><img src="https://image.xugaoxiang.com/imgs/2020/05/ec48521642fcd1fc.png" alt="img"></p><p>使用<code>root</code>账户登录数据库</p><p><img src="https://image.xugaoxiang.com/imgs/2020/05/bc69bc88dfaff242.png" alt="img"></p><p>创建一个数据库，名称是<code>testdb</code>，字符编码是<code>utf8</code></p><p><img src="https://image.xugaoxiang.com/imgs/2020/05/74a9426c9d3198e2.png" alt="img"></p><p>接下来，新建一张表，表名是<code>testtable</code>，有三个字段</p><ul><li><code>id</code>，数据类型是<code>INT(11)</code>，设为主键、唯一、非空、<code>UNSIGNED</code>、<code>AUTO INCREMENT</code></li><li><code>name</code>，数据类型是<code>VARCHAR(45)</code>,设为非空</li><li><code>sex</code>，数据类型是<code>VARCHAR(45)</code>，设为非空</li></ul><p><img src="https://image.xugaoxiang.com/imgs/2020/05/199d36c4c467eb79.png" alt="img"></p><p><img src="https://image.xugaoxiang.com/imgs/2020/05/f865893f35a875b5.png" alt="img"></p><h3 id="实例源码"><a href="#实例源码" class="headerlink" title="实例源码"></a>实例源码</h3><p>这里我们使用<code>pymysql</code>这个库来操作数据库，首先通过<code>pip</code>来安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure><p>数据库的基本操作就是增(<code>Create</code>)、查(<code>Retrieve</code>)、改(<code>Update</code>)、删(<code>Delete</code>)，就是所谓的<code>CRUD</code>，下面通过实例一个一个的来操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"># 数据库连接</span><br><span class="line">db = pymysql.connect(&quot;localhost&quot;, &quot;root&quot;, &quot;toor&quot;, &quot;testdb&quot;)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line"># 插入操作</span><br><span class="line">try:</span><br><span class="line">   # 执行sql语句</span><br><span class="line">   cursor.execute(&quot;INSERT INTO testtable(name, sex) VALUES(&#x27;xgx&#x27;, &#x27;male&#x27;)&quot;)</span><br><span class="line">   # 提交到数据库执行</span><br><span class="line">   db.commit()</span><br><span class="line">except:</span><br><span class="line">   # 如果发生错误则回滚</span><br><span class="line">   db.rollback()</span><br><span class="line"></span><br><span class="line"># 查询操作</span><br><span class="line">try:</span><br><span class="line">   # 执行SQL语句，返回的是满足查询条件的记录数量</span><br><span class="line">   cursor.execute(&quot;SELECT * FROM testtable&quot;)</span><br><span class="line">   # 获取所有记录列表，除了fetchall方法，pymysql还提供了fetone()、fetchmany()</span><br><span class="line">   results = cursor.fetchall()</span><br><span class="line">   for row in results:</span><br><span class="line">      name = row[1]</span><br><span class="line">      sex = row[2]</span><br><span class="line"></span><br><span class="line">      # 打印结果</span><br><span class="line">      print(&quot;name: &#123;&#125;, sex: &#123;&#125;&quot;.format(name, sex))</span><br><span class="line">except:</span><br><span class="line">   print (&quot;Error: unable to fetch data&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 更新记录</span><br><span class="line">try:</span><br><span class="line">   # 执行sql语句</span><br><span class="line">   cursor.execute(&quot;UPDATE testtable SET sex=&#x27;female&#x27; WHERE id=4&quot;)</span><br><span class="line">   # 提交到数据库执行</span><br><span class="line">   db.commit()</span><br><span class="line">except:</span><br><span class="line">   # 如果发生错误则回滚</span><br><span class="line">   db.rollback()</span><br><span class="line"></span><br><span class="line"># 删除操作</span><br><span class="line">try:</span><br><span class="line">   # 执行SQL语句</span><br><span class="line">   cursor.execute(&quot;DELETE FROME testtable WHERE id=4&quot;)</span><br><span class="line">   # 提交修改</span><br><span class="line">   db.commit()</span><br><span class="line">except:</span><br><span class="line">   # 发生错误时回滚</span><br><span class="line">   db.rollback()</span><br><span class="line"></span><br><span class="line"># 关闭数据库连接</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><h3 id="ubuntu安装mysql"><a href="#ubuntu安装mysql" class="headerlink" title="ubuntu安装mysql"></a>ubuntu安装mysql</h3><p>如果你的系统是<code>ubuntu</code>，可以参考 <a href="https://xugaoxiang.com/2020/03/01/ubuntu-mysql-installation/">ubuntu安装mysql</a> 进行安装</p>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Games </tag>
            
            <tag> 日志 </tag>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝图</title>
      <link href="/2024/03/18/%E8%93%9D%E5%9B%BE/"/>
      <url>/2024/03/18/%E8%93%9D%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Flask教程-十四-蓝图"><a href="#Flask教程-十四-蓝图" class="headerlink" title="Flask教程(十四)蓝图"></a><a href="https://xugaoxiang.com/2020/08/24/flask-14-blueprint/">Flask教程(十四)蓝图</a></h1><h3 id="软硬件环境"><a href="#软硬件环境" class="headerlink" title="软硬件环境"></a>软硬件环境</h3><ul><li>windows 10 64bit</li><li><a href="https://xugaoxiang.com/tag/anaconda/">anaconda</a>3 with <a href="https://xugaoxiang.com/tag/python/">python</a> 3.7</li><li>pycharm 2020.1.2</li><li><a href="https://xugaoxiang.com/tag/flask/">flask</a> 1.1.2</li></ul><h3 id="什么是蓝图"><a href="#什么是蓝图" class="headerlink" title="什么是蓝图"></a>什么是蓝图</h3><p>蓝图(<code>blueprint</code>)提供了<strong>模块化管理程序路由</strong>的功能，使程序结构清晰、简单易懂。<code>blueprint</code>对象和<code>flask</code>应用对象的工作方式很像，但他俩不是一个东西。蓝图很好地简化了大型应用工作的方式，并提供给<code>flask</code>扩展在应用上注册操作的核心方法。</p><h3 id="应用工厂函数"><a href="#应用工厂函数" class="headerlink" title="应用工厂函数"></a>应用工厂函数</h3><p>前面讲到常见<code>flask</code>项目结构时提到一点，在单个文件中开发应用很方便，但是有个很大的缺点，应用在全局作用域中创建，无法动态修改配置。运行脚本时，应用实例已经创建，再修改配置已经为时已晚。面对这个问题，解决方案就是延迟创建应用实例，这时工厂函数就出场了，来看下面的示例</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_bootstrap <span class="keyword">import</span> Bootstrap</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> app.config <span class="keyword">import</span> Config</span><br><span class="line"></span><br><span class="line">bootstrap = Bootstrap()</span><br><span class="line">db = SQLAlchemy()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_app</span>(<span class="params">config_class=Config</span>):</span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">    app.config.from_object(Config)</span><br><span class="line">    bootstrap.init_app(app)</span><br><span class="line">    db.init_app(app)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure><p>首先导入了大多数正在使用的<code>flask</code>扩展，但是由于尚未初始化所需的应用实例，所以创建扩展类时没有向构造函数传入参数，因此扩展并未真正初始化。<code>create_app</code>函数是应用的工厂函数，接受一个参数，是应用使用的配置名。配置类在<code>config.py</code>文件中定义。应用创建并配置好后，就能初始化扩展了。在之前创建的扩展对象上调用<code>init_app()</code>便可以完成初始化</p><h3 id="为什么使用蓝图"><a href="#为什么使用蓝图" class="headerlink" title="为什么使用蓝图"></a>为什么使用蓝图</h3><p>来看看蓝图的优点，来自官方文档</p><ul><li>把一个应用分解为一个蓝图的集合。这对大型应用是理想的。一个项目可以实例化一个应用对象，初始化几个扩展，并注册一集合的蓝图</li><li>以<code>URL</code>前缀和<code>/</code>或子域名，在应用上注册一个蓝图。<code>URL</code>前缀<code>/</code>子域名中的参数即成为这个蓝图下的所有视图函数的共同的视图参数（默认情况下）</li><li>在一个应用中用不同的<code>URL</code>规则多次注册一个蓝图</li><li>通过蓝图提供模板过滤器、静态文件、模板和其它功能。一个蓝图不一定要实现应用或者视图函数。</li><li>初始化一个<code>Flask</code>扩展时，在这些情况中注册一个蓝图</li></ul><p>蓝图作为<code>flask</code>层提供分割的替代，共享应用配置，并且在必要情况下可以更改所注册的应用对象。它的缺点是你不能在应用创建后撤销注册一个蓝图而不销毁整个应用对象。</p><h3 id="蓝图示例"><a href="#蓝图示例" class="headerlink" title="蓝图示例"></a>蓝图示例</h3><p>结合上面的应用工厂和蓝图，我们来看看示例，工程结构如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">blueprint/</span><br><span class="line">  app/</span><br><span class="line">      static/</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">      views/</span><br><span class="line">        index.py</span><br><span class="line"></span><br><span class="line">      templates/</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">      __init__.py</span><br><span class="line"></span><br><span class="line">      config.py</span><br><span class="line"></span><br><span class="line">  manage.py</span><br><span class="line">  README.md</span><br><span class="line">  requirements.txt</span><br></pre></td></tr></table></figure><p>其中<code>manage.py</code>代码如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> create_app</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = create_app()</span><br><span class="line">    app.run(use_reloader=<span class="literal">True</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p><code>__init__.py</code>代码如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> .views.index <span class="keyword">import</span> index_blueprint</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_app</span>():</span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">    app.config.from_object(config)</span><br><span class="line">    app.register_blueprint(index_blueprint)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure><p><code>index.py</code>源码如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line"></span><br><span class="line">index_blueprint = Blueprint(<span class="string">&#x27;index&#x27;</span>, __name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@index_blueprint.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello blueprint.&quot;</span></span><br></pre></td></tr></table></figure><p><code>config.py</code>存放的是相关的配置信息</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DEBUG = <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>当上述项目启动后，我们就可以访问<code>http://127.0.0.1:5000</code>，浏览器输出<code>Hello blueprint.</code></p><h3 id="如何组织蓝图"><a href="#如何组织蓝图" class="headerlink" title="如何组织蓝图"></a>如何组织蓝图</h3><p><code>flask</code>中同样没有规定你如何来组织蓝图。常见的，有按照功能(<code>functional</code>)和按照分区(<code>divisional</code>)这2种方式来组织。</p><p>在功能架构中，按照每部分代码的功能来组织你的应用。所有模板、静态文件和视图都单独放在一个文件夹中，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">project/</span><br><span class="line">    app/</span><br><span class="line">        __init__.py</span><br><span class="line">        static/</span><br><span class="line">        templates/</span><br><span class="line">            home/</span><br><span class="line">            admin/</span><br><span class="line">        views/</span><br><span class="line">            __init__.py</span><br><span class="line">            home.py</span><br><span class="line">            admin.py</span><br><span class="line">        models.py</span><br><span class="line">        config.py</span><br><span class="line"></span><br><span class="line">    README.md</span><br><span class="line">    requirements.txt</span><br><span class="line">    manage.py</span><br></pre></td></tr></table></figure><p>除了<code>project/app/views/__init__.py</code>，在<code>project/app/views/</code>文件夹中的每一个<code>.py</code>文件都是一个蓝图。在<code>project/app/__init__.py</code>中，加载这些蓝图并在<code>flask</code>对象中注册。</p><p>而在分区式架构中，按照每一部分所属的蓝图来组织你的应用。所有的模板、视图和静态文件放在一个文件夹中。项目结构如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">project/</span><br><span class="line">    app/</span><br><span class="line">        __init__.py</span><br><span class="line">        admin/</span><br><span class="line">            __init__.py</span><br><span class="line">            views.py</span><br><span class="line">            static/</span><br><span class="line">            templates/</span><br><span class="line">        home/</span><br><span class="line">            __init__.py</span><br><span class="line">            views.py</span><br><span class="line">            static/</span><br><span class="line">            templates/</span><br><span class="line">        models.py</span><br><span class="line">        config.py</span><br><span class="line"></span><br><span class="line">    README.md</span><br><span class="line">    requirements.txt</span><br><span class="line">    manage.py</span><br></pre></td></tr></table></figure><p>在上面的分区式结构，每一个<code>project/app/</code>之下的文件夹都是一个独立的蓝图。所有的蓝图通过顶级的<code>__init__.py</code>注册到<code>flask</code>对象中。</p><p>至于说，上面两种结构孰优孰劣，这个没有定论。一般的建议是这样的：如果应用是由独立的且仅仅共享模型和配置的各组件组成，建议选择分区式；如果应用的组件之间联系较为紧密，则建议使用功能式架构。</p>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 日志 </tag>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由</title>
      <link href="/2024/03/18/%E8%B7%AF%E7%94%B1/"/>
      <url>/2024/03/18/%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Flask教程-三-路由"><a href="#Flask教程-三-路由" class="headerlink" title="Flask教程(三)路由"></a><a href="https://xugaoxiang.com/2020/03/13/flask-3-routing/">Flask教程(三)路由</a></h1><h3 id="软硬件环境"><a href="#软硬件环境" class="headerlink" title="软硬件环境"></a>软硬件环境</h3><ul><li>Windows 10 64bit</li><li>Anaconda3 with <a href="https://xugaoxiang.com/tag/python/">python</a> 3.7</li><li>PyCharm 2019.3</li><li>Flask 1.1.1</li></ul><h3 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a>什么是路由</h3><p>路由(<code>Routing</code>)是用来映射<code>URL</code>和执行对应任务的函数。通过设置不同的路由，来访问不同的页面，像<a href="https://xugaoxiang.com/2020/03/12/flask-2-first-app/">上一节</a>中的<code>/</code>路由，就是访问网站的根目录。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>下面来看一个实例</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/home&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Welcome to home!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;127.0.0.1&quot;</span>,port=<span class="number">5000</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>这时候去访问<code>http://127.0.0.1:5000</code>就会出现404错误</p><p><img src="https://image.xugaoxiang.com/imgs/2020/12/dd20455d4d54294d.png" alt="flask"></p><p>因为我们代码里根本就没有处理<code>/</code>路由的请求，访问<code>http://127.0.0.1:5000/home</code>，页面才会显示<code>Welcome to home!</code></p><p><img src="https://image.xugaoxiang.com/imgs/2020/12/1824e088335d2354.png" alt="flask"></p><p>那么另一个问题来了，如果有多条路由，比如<code>/home/shelly</code>、<code>/home/tom</code>和<code>、/home/carl</code>，能不能在同一个函数中进行处理呢？答案是可以的，我们可以通过给<code>@app.route</code>传递变量的方式实现，如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/home/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Welcome to home!<span class="subst">&#123;name&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;127.0.0.1&quot;</span>,port=<span class="number">5000</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>这时候访问<code>http://127.0.0.1:5000/home/carl</code>，页面上就会显示<code>Welcome to home!carl</code>；访问<code>http://127.0.0.1:5000/home/shelly</code>，页面上就会显示<code>Welcome to home!shelly</code>了</p><p><img src="https://image.xugaoxiang.com/imgs/2020/12/25ac448aad31d2aa.png" alt="flask"></p><p><img src="https://image.xugaoxiang.com/imgs/2020/12/7b5d857af847d8d8.png" alt="flask"></p><p>可以看到上面的实例中，传递的参数是字符串类型，那如果是其它数据类型，怎么办呢？看下面这个实例</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特别注意，int后面冒号前后不能有空格</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/home/&lt;int:age&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">age</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Age=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(age)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;127.0.0.1&quot;</span>,port=<span class="number">5000</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>这个时候我们就可以传递整型数据了 ，比如<code>http://127.0.0.1:5000/home/20</code></p><p><img src="https://image.xugaoxiang.com/imgs/2020/12/52dfa4722eb616ad.png" alt="flask"></p><p>除了上述添加路由的方法，<code>Flask</code>还提供了一个函数<code>add_url_rule</code>，它也能够完成同样的功能，看个实例</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello flask!&#x27;</span></span><br><span class="line"></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/&#x27;</span>, <span class="string">&quot;index&quot;</span>, index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;127.0.0.1&quot;</span>,port=<span class="number">5000</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>访问<code>http://127.0.0.1:5000</code>，可以看到页面显示<code>Hello flask!</code>，效果跟使用<code>@app.route</code>是一模一样的</p><p><img src="https://image.xugaoxiang.com/imgs/2020/12/81b923b1e9af5052.png" alt="flask"></p>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请求转发</title>
      <link href="/2024/03/18/%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91/"/>
      <url>/2024/03/18/%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Flask教程-二十四-请求转发"><a href="#Flask教程-二十四-请求转发" class="headerlink" title="Flask教程(二十四)请求转发"></a>Flask教程(二十四)请求转发</h1><h3 id="软硬件环境"><a href="#软硬件环境" class="headerlink" title="软硬件环境"></a>软硬件环境</h3><ul><li>windows 10 64bit</li><li>anaconda3 with python 3.7</li><li><a href="https://xugaoxiang.com/tag/flask/">flask</a> 1.1.2</li></ul><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在某些情况下，我们需要在<code>flask</code>中进行<code>http</code>请求的转发，也就是让<code>flask</code>成为<code>http</code>代理。本文借助流行的<code>http</code>请求库<code>requests</code>来实现。</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="comment"># 这里可以使用requests.request来实现各种http方法</span></span><br><span class="line">    req = requests.get(<span class="string">&#x27;http://127.0.0.1:5000/proxy&#x27;</span>)</span><br><span class="line">    <span class="comment"># 响应体返回，这里是字符串</span></span><br><span class="line">    <span class="keyword">return</span> req.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/proxy&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proxy</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello Flask.&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">5000</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>启动服务，访问<code>http://127.0.0.1:5000</code>，页面上会显示字符串<code>Hello Flask.</code></p><p><img src="https://image.xugaoxiang.com/imgs/2020/11/6d1bee8c61840904.png" alt="flask_proxy"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
